buffer:
type
size
bufferopt

bufferopt:
value array ptr
cmp array ptr

Bool<- n % 2

# BUFFER
var x =: Buffer{Int}(10, 10)
x.resizeDimen(1, 30)
# -------------------------
var x =: Buffer{Int}(10, 10).fill!(0)
x.fill!(0, x.resizeDimen!(1, 30))
>>> fillbuf a b ; start_index
>>> jumpfor ; instr_index ; instr_length

# NIL
var f =: Int~
f = nil

var b =: Int|Nil
b = nil

var d =: Int
d = 5

type Star: 
	var d =: Int~
	var e =: Int
	var f
..
func Star(a, b):
	new(d:a, f:b) # new 'new' syntax ;)
..

var star =: Star(5, 6)
star.e # error!, field 'e' is unassigned.
star.e = 5 # ok, e is now assigned.
star.f

var froot =: Int # uninitialized
froot = 20

# IMPLICIT CONVERSION
false == 0
0.0 == 0

if x % 2:

#############
#[CODE]#
var score =: TestScore
var buffer =: [15, 6, 8, 0, 21, 75, 3, 7]
score = buffer[5:]
#[BYTECODE]#
##############


COMPILER
- Expression ASTs are associated with their BLOCKS, CONTROL FLOW and FUNCTIONS.
- Main and dependencies are walked top to bottom.
- Every declared variable has a tag:
	- initialized
	- dynamic/covariant/invariant
	- 
- An event-based relationship linking.
- 

