# 03/11/16
VM IMPLEMENTATION
- The last evaluated object is stored in returned objects until a return/throw command is encountered.
STATIC DISPATCH
- All of an objects possible types at any 'particular time' are gathered statically and this is used to filter the multiple dispatch at compile time.
######################################################################

## CHANGES ##
opcode attribute -> int
no more unsure opcodes
## CHANGES ##
	---------------
	STACK HIERARCHY
	foo ← [P1] current_stack_size();
	try ← [P2] current_stack_size() | catch_instruction_pos();
	bar ← [P3] current_stack_size();
	----------------
	THROWN OBJECTS
	a # Nil Exception
	b # Cast Exception
	c
	... # others
	----------------
	RETURNED OBJECTS
	a
	----------------


#############################################
			INSTRUCTIONS [XX]
#############################################S
# primitive ops don't need nil checks because the compiler makes signature
# the operands are bare primitives.
# MOV
mov_v a b
mov_r a b
mov_wr a b
# ADD, SUB, MUL, DIV, MOD, EXP, ROOT, UNM
add a b c
sub a b c
mul a b c
div a b c
mod a b c
exp a b c
root a b c
unm a b
# INCR, DECR, STEP
incr a
decr a
step a b
# CAST
cast a b ; type_index
# EQ, LT, LE
eq a b c
lt a b c
le a b c
eq2 a b ; jump_offset
lt2 a b ; jump_offset
le2 a b ; jump_offset
# AND OR
and a b c
or a b c
# BNOT, BAND, BOR, BXOR,
bnot a b c
band a b c
bor a b
bxor a b
# SHL, SHR
shl a b c
shr a b c
# FORLOOP
forloop_ initial_value ; end_value ; instruction_index
forloop2_ a b ; instruction_index
# MK
mkbuf a ; dimen ; dimensizes
mkcmp a ; type_index; constructor_function_index
# PULLGLOBAL
pullglob_ a ; global_index # sets pointer to a particular object in global.
pushbuf_v_ a b ; index
pushbuf_r_ a b ; index
pushbuf_wr_ a b ; index
pushbuf_vnull_ a b ; index
pushbuf_rnull_ a b ; index
pushbuf_wrnull_ a b ; index
pushcmp_v_ a b ; index
pushcmp_r_ a b ; index
pushcmp_wr_ a b ; index
pushcmp_vnull_ a b ; index
pushcmp_rnull_ a b ; index
pushcmp_wrnull_ a b ; index
--------
# last index is checked to determine if pulling/pushing barePrimitive
pullbufel_ a b
pushbufel_ a b
---------
pullcmpel_ a b ; index # pullcmp pulls the ref onto the stack
---------
pushcmpel_v_ a b ; index
pushcmpel_r_ a b ; index
pushcmpel_wr_ a b ; index
pushcmpel_vnull_ a b ; index
pushcmpel_rnull_ a b ; index
pushcmpel_wrnull_ a b ; index
# INDEX
index ; number
index_ ; number
# TYPECHECK
typecheck_ a ; type_index ; switch_number ; ...
typecheck a b
typechecksub a b
typecheck2 a ; type_index
typechecksub2 a ; type_index
# SWITCH
switch ; instr_index ; instr_index ; ...
# CALL, RUN, EMIT
call a
run a
emit a
call2 ; function_index
run2 ; function_index
emit2 ; function_index
# STEPBACK
stepback ; offset
# LEN  # Cannot be Nil # Complex
lencmp a b
lenbuf a b
# DIMEN # Cannot be Nil # Buffer
dimen a b
dimensize a b c # c is the dimension position
# CATCH, THROW
catch a b  # automatic clearance for just one object
throw a
# JMP, JMPBACK
jmp ; jump_offset
jmpback ; jump_offset
# RET
ret a
ret2
# CLEAR
clear ; number
# PRINT, SCAN
print a
println a
scan a
# FOPEN, FREAD, FWRITE, FCLOSE
fopen a
fread a b
fwrite a b
fclose a
# EXIT
exit a # error code


OPCODE STRUCTURE
8
8, 8
8, 8, 8
8, 8, 8, 8
32/64
