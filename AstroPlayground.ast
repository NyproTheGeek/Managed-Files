# 18/12/16
# Astro0.2 # Abstract Type
	type ab Jitterable

	func jitter j = Jitterable, :speed = F32:
		# TODO jitter animation on a Jitterable
	..

	type LoginButton <: UIView, Jitterable

	let loginBtn = LoginButton
	loginBtn .jitter speed=0.5

---------------------------------

# 17/12/16
# Astro0.2
# Introsort Pseudocode
func introSort list = []:
	let maxDepth = log list.size * 2

func reIntroSort var list = [], maxDepth = Int:
	let size = list.size
	if size <= 1:
		rt # base case
	else if maxDepth = 0:
		heapSort list
	else:
		let p = partition list
		reIntroSort list[1:p], maxdepth - 1
        reIntroSort list[p:size], maxdepth - 1
	..
..

---------------------------------
# 14/12/16
# Astro0.1
func factorial n:
	if n == 1: 1
	else: n * factorial n - 1
..

func fill! p = Person, :name & :gender = Str, :age = Int:
	self->name(name)->age(age)->gender(gender)
let steve = Person
steve.fill! name="Steve", gender="M", age=51
---------------------------------
# 14/12/16
# Astro0.1
# PROPOSED PRODUCTION LINE
	func giveOnes(list = []): yd 1
	func addUp(take x = Int): var pin d = 0; yd d += x
	func createList(take x = Int):
		var list = []
		for y thru x:
			list .append y
		list
	..
	giveOnes .>addUp .>createList
---------------------------------
# 13/12/16
# Astro0.1
	type Car(let hide year miles = Int)

	println 1.toStr

	obj Person:
		var name = Int

	type Person(name, age):
		var name, age

	Car.x = 5
	Car.y = 25
	let ben = Person = "Benjamin", 56

	println total([1, 2, 3, 4, 5])
---------------------------------
# 12/12/16
# Astro0.1
# Solving range ambiguity issue
1. only ranges can have colon following a literal or name. apart from keywords which can also come before a colon.
2. the operands and operators in a range are packed up
3. ranges come in two types. ranges without step (r1) and ranges with step (r2)
4. in places where a range is expected, the tokens are tested for r2, then r1.
r1 = a:b:c:
r2 = a:b:
---------------------------------
# 11/12/16
# Astro0.1
func __cast(::Type{Str}, ch =: Chars):
	var chars = List{ch}
	var ls = I8[]
	for char thru chars: # char is an I32
		ls .append (char.toUTF8)
	Str{ls}
..
---------------------------------
# 10/12/16
# Python
def kapreka(n):
	for i in range(7):
		chars = list(str(n))[:4]
		chars.sort()
		a = int("".join(chars))
		chars.reverse()
		b = int("".join(chars))
		n = b - a
		print('{} - {} = {}'.format(a, b, n))
# Julia # erroneous!
function kapreka(n)
	for i=1:7
		chars = "" * n[:4]
		a = parse(Int64, sort!(chars))
		b = parse(Int64, reverse!(chars))
		n = b - a
		println("$b - $b = $n")
	end
end
# Astro0.1
func kapreka(n):
	for i thru (1:7):
		let s = Str{n}[:4]
		let a = Int{s.sort!}
		let b = Int{s.reverse!}
		n = b - a
		println('[b] - [a] = [n]')
	..
..
---------------------------------
# 02/12/16
# Python
def fib(n):
	if n < 2:
		return n
	else:
		return fib(n - 1) + fib(n - 2)
# Julia
function fib(n)
	if n < 2
		n
	else
		fib(n - 1) + fib(n - 2)
	end
end
# Astro0.1
func fib(n):
	if n < 2:
		n
	else:
		fib(n - 1) + fib(n - 2)
--------------------------------
# 29/11/16
# Python
while True:
	print('>>> ')
	return interpret(compile(parse(lex(input()))))
# Julia
while true
 	println(">>> ")
	interpret(compile(parse(lex(input()))))
end
# Astro0.1
loop: println('>>>', scan() .lex $ .parse $ .compile $ .interpret $)
---------------------------------
# Python
jack = Profile("admin/Captain Jack Sparrow")
jack.changePicture("res/goofy.png")
jack.postStatus("Savvy?")
jack.deleteMessages()
# Julia
jack = Profile("admin/Captain Jack Sparrow")
changePicture(jack, "res/goofy.png")
postStatus(jack, "Savvy?")
deleteMessages(jack)
# Astro0.1
var jack = Profile("admin/Captain Jack Sparrow")
	->changePicture("res/goofy.png")
	->postStatus("Savvy?")
	->deleteMessages()
