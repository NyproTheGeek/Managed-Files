# 24/02/17
# Dexter 0.2
#########################
#########################
fun Node value:
	new.(value:value)

var primes = for x in [2:]:
    if (for y in [2:*(root x)]: x % y == 0 ? break false: true):
        yield x

var primes = x || x <- [2..] ...
~ (for y in [2..keep root x]: x .mod y == 0 ? break false : true)
#########################
#########################

# LINE CONTINUATION # TODO DOCUMENT
var primes = x || x <- [2..] ...
~ (for y in [2..keep root x]:  x .mod y == 0 ? break false : true)

# TYPE CASTING # TODO DOCUMENT
#:: Str, Str -> Employee
fun Employee name, job:
	new (base name), job

#:: Employee, Employee
fun foo x, y:
	foo x as base, y

#:: Employee, Employee
fun foo x, y:
	foo x, y as Person

var peopleList = [Person][
	Employee 'John Baker',
	Person 'Sean Connery',
	Manager 'Wale Coker'
]

var person = peopleList.[2] # there is no need for explicit casting


# TYPE ASSOCIATION # TODO DOCUMENT
type Person name, age
type Person.Pet name, age

# MODULE IMPORT # TODO DOCUMENT
- when you import a module, every public member is imported into the namespace.
import
	com.appy.BananaTree
	com.nypro.[AppleTree, GuavaTreeTree]
- if you want to import members namespaced
import
	com.appy.BananaTree!
	com.nypro.[AppleTree!; GuavaTree!]
- import all
import
	com.appy.BananaTree.|?|
	com.nypro.[?]
- import some
import
	com.appy.BananaTree.|Trunk, grow|
	com.nypro.[AppleTree.|Leaf, Apple|; GuavaTree!.|grow, Seed|]

# 23/02/17
# Dexter 0.2
# VECTORIZATION # TODO DOCUMENT
mat1 _* mat2
mat1 _times mat2
mat1 _+ mat5
mat4 _dot mat45 _plus mat23

# 22/02/17
# Dexter 0.2
# ACCESS MODIFIER # TODO DOCUMENT
type Car:
	let *make # unaccessible outside module
	let `model # read-only outside module

fun *update car, make, model: # unaccessible outside module
	car->make, ->model = make, model

# INDENTATION # TODO DOCUMENT
grate play
	.rewind
	.zoom satire, lullaby
		.require
		.acquire
.baloon

grate.(play.rewind.zoom.(satire, lullaby.require.acquire)).baloon


# FUNCTION CALL # TODO DOCUMENT
toUppercase ('hello ' + 'world!').toLowerCase
toUppercase.('hello ' + 'world!').toLowerCase
greet 'Barney' >> 'Darmie'
greet->('Barney')->("Darmie")

# DELEGATE # TODO DOCUMENT
(foo$ 0, 'a') += delegate
var delegatedProperty =  set x: delegateSet \\ get: delegateGet

# PROPERTIES # TODO DOCUMENT
var prop1 =
	set x:
		this = x
		println this
	get:
		println this
		this
..
#:: Int
var prop2 = set x: println this \\ get: println this
var prop3 = set \\ get

# SINGLETONS # TODO DOCUMENT
type DataProviderManager:
	let keep allDataProviders = get \\ set

#:: DataProviderManager, DataProvider
fun registerDataProvider dpm, provider: !

# REFERENCES # TODO DOCUMENT
ref, val, iso, acq

# ANONYMOUS TYPES TODO DOCUMENT
window.addMouseListener obj MouseAdapter:
	#:: MouseEvent
	fun mouseClicked e: !
	#:: MouseEvent
	fun mouseEntered e: !

# LABELS # TODO DOCUMENT
fun foo:
	fun bar:
		return ext 45
..

loop:
	var digit = 8
	while x < digit:
		if x < 0:
			break ext
		else:
			continue
	..
..

new view.addListener obj Listener:
	#:: View?, Int, Int
	fun onScroll view, dX, dY:
		scrollList.each |it| =>
			it.invoke ext.self
..

# USING OTHER CONSTRUCTORS # TODO DOCUMENT
fun Person name:
	Person name, 0

# DICT # TODO DOCUMENT
let fragment = [Fragment:Str]
var person = [
	name:
		firstname: "John"
		lastname: "Doe"
	age: 35
]

println person.[name, surname]

# LAZINESS  # TODO DOCUMENT
let appComponent = lazy iso self.getAppComponent
var lazyField = lazy
	set x: println "I'm lazy!"

# 21/02/17
# Dexter 0.2
# CATCH CALL # TODO DOCUMENT
file->open`ferr->close
file.open`{FileNotFoundError: println message}

# 20/02/17 & 19/02/17
# Thanks Haskell :)
# # FUNCTION CALL RESOUTION # TODO DOCUMENT
# # these two have different result
# toUppercase  ('hello ' + 'world!').toLowerCase # two spaces or more mandatory
# toUppercase('hello ' + 'world!').toLowerCase

# FLAT NESTING # STRIPPABLE # TODO DOCUMENTs
for x in [1..10]; for y, index in range:
	println '[index]: [x], [y]'

if location == brazil;
music.update;
if music.isSalsa:
	play banjo
else: !
else: play piano

y || x <- xs; y <- x

# CALLABLE # TODO DOCUMENT
let object = Greeter
object.('Banji')

# LET SUBJECT, LET OBJECT # TODO DOCUMENT
# if a let subject is bound to a new object, the object becomes let

# BACK TO FUNCTIONS ONLY # TODO DOCUMENT
type Node:
    let left, right, parent = Node?

#:: Node -> Bool
def isLeaf node:
	node.|right and left| == nil

# RETURNING NOTHING # TODO DOCUMENT
#:; Node -> !
def updateHeight node:
	let
		leftHeight = node.left.height
		rightHeight = node.right.height
	node.height = (Int chooseMax(F64 leftHeight, >> rightHeight)) + 1
	!
..

# ANOTHER VARIATION TO CONDITIONAL CHAINING # TODO DOCUMENT
#:: Node -> Bool
def isLeaf node:
	node.|right and left| == nil

#:: Node -> Bool
def isSymmetric node:
	node.|right == left|.height

# # REMOVE WART2 AND WART3
# foo (+ bar)
# foo (bar + qux).size
# (foo (bar + qux)).size
# (+ (x + y).size)
# foo(hello) # error!

# WART1
Int # type specification
Int() # construction
# WART2
# foo + bar # when you actually mean foo (+ bar)
# foo (bar + qux).size # when you actually mean foo((bar + qux).size)
# WART3
# (+((x + y).size))
# WART4
p.a.[4.5..6.7].size

# FILTER PRIMES
primes = filterPrime [2..]
    where filterPrime (p:xs) =
        p : filterPrime [x | x <- xs, x `mod` p /= 0]

def filterPrime [p, ...xs]:
	p ++ filterPrime [x || x <- xs ~ x .mod p != 0]
var primes = filterPrime [2..]

# NAMED ARGUMENTS # TODO DOCUMENT
def send message, to.person:
    var email = person.email
    .send message

def send .message, .person: # mandatory named arguments
    var email = person.email
    .send message

# RETURNED FORWARD # TODO DOCUMENT
buffer.resize(56).fill(0, $0)

# TYPE EXTENSION # TODO DOCUMENT
type fork Programmer:
	let philosophies

# PROTOTYPE # TODO DOCUMENT
var peter = Person "Peter Parker"
peter.+heroName = "Spider-man"

var clark = peter.property
clark->name, ->heroName = 'Clark Kent', 'Superman'

# PATTERN MATCHING # TODO DOCUMENT
def fact 0: 1
def fact n: n * fact n  - 1
def head [x, ...y]: x
def vecAdd (x, y), (a, b): (a + a, y + b)
def key [a:b]: a
def range [a..b]: a, b
def height 1``20: 10
def add _, _: $1 + $2
def fact \zero: 1 # bad idea!
def width x!1``20: println x
def array all![x, ...xs]: println all
def integer num!/[-+]\d+/: Int num

match char
| 'A'     : 'bing'
| \b      : 'bang'
| 'C'     : 'bung'
| 'D'``'E': 'beng'
| _       : 'bong'


# STRING INETRPOLATION # TODO DOCUMENT
var me = 'My name is [name] and I am [age] years old'

# ESCAPE # TODO DOCUMENT
let heroes = [
	\hulk	  : 'Bruce Banner'
	\dareDevil: 'Matt Murdock'
	\superman : 'Kal El'
]

# RESERVED OPERATORS # TODO DOCUMENT
\ = prefix
| = prefix and postfix
/ = prefix and postfix

# RANGED VALUE TODO DOCUMENT
def height x!1``20: println x
var alphabet = 'a'``'z'

# # CATCH CALL
# file.open`ferr
# file.open`{FileNotFoundError: println message}

# DECOUPLED TYPE SIGNATURE # TODO DOCUMENT
#:: Int, Int -> Int
def add a, b: a + b

#:: Str, Int -> Person
type Person name, age <: Animal:
	let name, age
	def init

# GENERICS # TODO DOCUMENT
#:: ST<:Number, T -> T
def add a, b: a + b

#:: Person, $T[$1] -> !
def setId p, i: p.id = i;

#:: $T(=Number, <:Iterable), Number
def goThrough iter, from.index:
    x || x <- iter.[index..]

#:: @length<:Number
type MyList size = length

# 17/02/17
# Dexter 0.2
# WART1
Int # type specification
Int() # construction
# WART2
foo + bar # when you actually mean foo (+ bar)
foo (bar + qux).size # when you actually mean foo((bar + qux).size)

# LIST # TODO DOCUMENT
var x = [Int]
var y = [20 400 Int Str]
var z = [26][]

# TYPE CHECKING # TODO DOCUMENT
(in$ 5b, [5b, 6b]) :: $T<:Comparable, [T] -> Bool
head$ [1, 2] :: [_] -> _

# GENERICS # TODO DOCUMENT
var x = $T<:Comparable
var t = $T=Int|Str
var r = @len::Int

# FUNCTION SIGNATURE # TODO DOCUMENT
let func = ($T, T -> Bool)
def plus = add
let plus = add$

# 16/02/17
# Dexter 0.2
# TERNARY OPERATOR
if x == y: true \\ else: false
x == y ? true : false

if (x == y? true : false):
	print "Hello"


# LIST COMPREHENSION
x * y || x <- [2, 5, 10]; y <- [8, 10, 11] ~ x * y > 50
def length xs: sum 1 || _ <- xs

def removeNonUppercase str: c || str ~ c in ['A':'Z']

let xxs =
	[[1 ,3 ,5 ,2 ,3 ,1 ,2 ,4 ,5] ,[1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9] ,[1 ,2 ,4 ,2 ,1 ,6 ,3 ,1 ,3 ,2 ,3 ,6]]

[ [ x | x <- xs , even x ] | xs <- xxs ]
[ [ x || x <- xs ~ even x ] || xs <- xxs ]

let rightTriangles = [(a, b, c) || c <- [..10]; b <- [..c]; a <- [..b] ~ a^2 + b^2 == c^2, a+b+c = 24 ]

# RANGED VALUE
def getStudent id = r_[..100]:
	return student[id]

# Range vs Table
var x = [age:25], [..]
var y = [age..25], [1..5]

# Function Objects
def foo f:
	f ['a', 'b', 'c']
	f [1, 2, 3]

def bar num, f = (@Int->Int):
	f num

foo println$

# Generics
def add a = $T, b = T: a = b
add[Int] 5, 6

def fibonacci num:
	if num < 2:
		num
	else:
		fibonacci(num - 1) + fibonacci(num - 2)
..

def boomBang xs: x in xs ~ odd x: x < 10 ? 'BOOM!' || 'BANG'

# ERRONEOUS !!!
def filterPrime xs:
	p = filterPrime x || x <- xs ~ x .mod p != 0 # endless recursion
var primes = filterPrime [2..]
# haskell
primes = filterPrime [2..]
  where filterPrime (p:xs) =
          p : filterPrime [x | x <- xs, x `mod` p /= 0]

# Removing Wart 1
b.[5]
b.[..20]
rss_[]
rss_"I rock"
rss_'Hello'
rss_()

println((foo + bar).size)
println +(foo, bar).size


# 15/02/17
# Dexter 0.2
type MainActivity <: TopSectionFragmentListener:
	def onCreate bundle:
		super.onCreate bundle
		setContentView layouts.activity_main
		let toolBar = findView ids.tool_bar
		 setSupportActionBar toolBar
		var fab = findView ids.fab
		fab.setOnClickListener |view| =>
			Snackbar
			.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
			.setAction("Action", nil)
			.show
	..

	def createMeme top, bottom:
		let bottomFragment = getFragment.findView ids.bottom_frag
		bottomFragment.setMeme top, bottom
..

# Dexter 0.2
# 13/02/17
foo [2]
foo [:3]

foo[2] # getIndex
foo[:3] # getSlice

play((list + list).delete)

# Dexter 0.2
# 12/02/17
# Haskell
primes = filterPrime [2..]
  where filterPrime (p:xs) =
          p : filterPrime [x | x <- xs, x `mod` p /= 0]

# Dexter
var primes = for x, index in [2:]:
    if (for y in [2:*(root x)]: x % y == 0 ? break false; true):
        yield x

# PROPOSAL
for name, index in register: println name, index
for key, value, index in table: println key, value, pair
for name, (key, value) in nameList, table: println name, table
# COMPREHENSIONS
for x in [1:20]: yield x
# YIELD FROM
var don = for i in [1:45]: yield i
let bin = don[:] # synonymous with yield from

# Dexter 0.2
# 11/02/17
def
    asyn foo zee:
        parametricAngular 35 / zee

    norm grun zoom, ping:
        ping = ping + sieze zoom
        pandora ping

var
    keep xafora = await foo
    norm generativePlug = yen 45.6 * pi
    hold fred = Person zenithName, zenithAge

type
    abst Pandora galacticConstellationNumber

    norm BananaRepublic state, country

    enum Days:
        Sunday, Monday, Tuesday, Wednesday,
        Thursday, Friday, Saturday
    ..

    task NewTask

# abs, async, pin, block, actor
var a & b = Int
var a, b = Int
var a, b = Str, Int
var a, b, c = Str, Int
def add a & b & c = Int:
    return a + b + c

match scan "Read any good books lately?"
| "no" or "No":
  println "Go to your local library."
| "yes" or "Yes":
  println "Carry on, then."
| _:
  println "That's great; I assume."

# ANTI PATTERN
type Binary a, b:
    let a, b

    def init a, b

    def init a:
        a = a
        b = 0
..

type
    Tar x
    Doo y
    Bin a <: Doo
    Rot b <: Tar
        def foo b = Bin:
            super.foo b as super
    ..
..

def
    foo a = Tar, b = Doo:
        return a.x + b.y

    foo a = Bin, b = Rot:
        var temp = foo a as super, b as super
        return temp + (a.a + b.b)
..

# 10/02/17
# Dexter0.2
# Compare similar
def sameIdentifier a & b = Str:
	if a[1] == b[1]:
		|a == b|.replace(/_|-/, "").toLowerCase
..

# improved match
match x
| Number: println 'x is a Number' # type match
| Sum(1, 2): println 'x is Sum(l=1, r=2)' # exact match
| Sum(l, r): println 'x is [l + r]'# named match
| Sum($l, $r): println 'x is [x.l + x.r]'

def check a:
	| Int: println 'a is an Integer'
	| Str: println 'a is a a String'
..

# dict
var professor = [
	$id1: 'Charles Xavier'
	$id2: 56
]

# Functions, Types and Subjects
type T = Int
def foo = bar(5, 6)
var
	qux = 5
	doo = bar$('x', 0)
	day = F64$

def mix a:
	| 1: Int
	| 2: def add a, b: a + b
	| 3: 25
..

type Y = mix 1 # error
def von = mix 2 # error
let vim = mix 2 # ok


# 09/02/17
# Dexter0.2

# # WART 1
# foo[2] # getIndex, no-space
# foo [2]  # function call
# foo [2, 3] # function call
# foo [1:3] # function call
# WART 2
Int # type specification
Int() # construction
# # WART3
# let a = [
# 	1, 2
# 	3, 4,
# 	5, 6
# ]

# Removing extend keyword!
var adam = Person 'Adam Smith', 35
print adam->name, ->age
adam.+address = '25b, Magnolia Av., Califortuna, Baboon Island'
adam.+job = 'Banker'
