# 05/10/16
# # Casting
# mut x =: Person -> Employee # Downcasting
# mut y =: MyInteger -> 5.0f # Casting
# # mut z = ArrayList -> [1, 2, 3, 4] *= 3 # _setList OUTDATED
# # In a case where there is a possible downcast and a direct type cast
# # For example, if in the example below if Person has a _convert of
# # Employee and Employee is a subtype of Person, then the _convert is
# # chosen
# mut per =: Person -> Employee("Daniel", 25, "Game Programmer")

# Instance Chained Call
x.doThis()doThat()doAll()

# Returned Chained Call # OUTDATED
add(1, 2).subtract(2).multiply(3)

# # Ternary Operator
# let a =: z == r ? 1 __ 2 OUTDATED
# let b = d > 6 ? 2 __ 4.5 OUTDATED
# let a =: x and y == z ? Int.nil __ x == y ? z __ x == z ? y __ y == z ? x __ x + y + z OUTDATED
# # conditional statements and ternary operator statement should be bracketed when used in  arrays OUTDATED
# let hide binOpPrecedence =: [ OUTDATED
#     1, (x == 0 : y == 2 ?) | 3, 5|| OUTDATED
#     5, 6 | 7, (x == 0 ? 5 || 0) || OUTDATED
# ] OUTDATED
# # No ambiguity really, but it is almost unreadable OUTDATED
# mut x :: y :: a == b ? a :: b OUTDATED
# mut a :: hi == hello ? 3 :: 4, y :: 2 OUTDATED

# Coroutine Stream Operators
func work(pipe x =: Bool):
    print("working...")
    time.sleep(1500)
    print("done")
    x << true
..

func main():
    pipe done = Bool
    run work(done)
    << done
..

# Semantic ideology of =>
# has synonymous semantic representatio as &, but is used in more places like loops
# case conditions in match functions.
if x == 6 where r == 5
# if x equals 6 where r == 5
for a thru arr, d thru arr.list => d~ : print(d)
# for every a in arr, loop thru every d in arr.list where d isn't null
match check(s =: Int, test =: Int):
    case 1 => s > test: print("Yay!")

# Semantic ideology of ~
char =: getChar()~'i'
# if getChar not nil then pass value else pass 'i'
if getChar()~: print("Hello")
# if getChar nt nil then print 'Hello'

# rt # rt operates at function level
char =: getChar()~ rt 'i' # returns the fuction with value 'i'

# Sandwiched statement
char =: getChar()~(print("Too bad"); '')

# Reassessing Access Modifiers
# I'm gonna have to remove pack and prod
# A priv structure cannot be accessed beyond a module.
# A hide function or field cannot be accessed beyond its associated type, subtypes and their functions

# Custom operator Overloading
# You cannot overload punctuators and some other operators like '.' ':' '..' '=', '::', '=:', '<:', '>:', '===', '==:', '->', '>>', '<<'

# Immutable Array Content
let d =: 5 Int[1, 2, 3, 5, 6] # array can't grow, content can't change
mut x =: let 5 Int[1, 2, 3, 5, 6] # array can grow, but content cannot be mutated

# # Multidimensional Arrays
# let hide boom =: [
#     1, (x == 0 : y == 2 ?) | 3, 5||
#     5, 6 | 7, (x == 0 ? 5 || 0) ||
# ]

# Compilation
# Progressive code generation. bytecode (parse time) -> bytecode + machine code (run time) -> machine code (run time).
# Compilation units are as small as each function.
# Incremental build using dependency web

# # Constructor
# # A default constructor is different from an uninitialised state
#     mut s =: Str # uninitialised state, just a declaration.
#     mut r =: Str.nil # initialised to nil state.
#     mut t =: Str() # initialised using default constructor.

# States
# uninitialised state
# nil state
# valued state
    mut s =: Str # uninitialised, just a declaration.
    mut r =: Str.nil # initialised to nil state.
    mut t =: Str() # initialised using default constructor
# field can have default state though, even when the object is uninitialised
    type MyStr:
        mut value =: ""
        func ():..
        func (str =: Str):
            value = str
    ..

# Type Checking, Checks the current type of an object.
# === type exactly
# =:: type exactly
# ==: type and subtypes
# =<: type's subtypes
# =>: type's supertpes


# Exceptions
# It is a stack unwind mechanism and may not be used for error catching purpose only
try parse(tokens)
catch s =: SyntaxError:
    print(s.errorMsg)
    next
catch n =: NewlineBounce:
    next

loop:
    try:
        print("mathopia >>> ")
        mut input =: scan() # scans the line
        parse(scan(input))
    catch s =: SyntaxError:
        print(s.errorMsg)
        next
    catch n =: NewlineBounce:
        next
..


# Return Type Annotation
    func add(a, b): a + b # Function can return any type.
    func add(a, b)Int: a + b # Function can only return an Int object or subypes of it.
    func add(a, b)::Int: a + b # Function can only return an Int object.
    # Different ways of returning a new object
    rt let oldPerson =: getPerson()
    rt oldPerson =: getPerson()
    rt getPerson()


# Global space
let x = 1
func show(x):
    glob.x = x
    print(glob.x)
..

# Nested for # 13/10/16
# for x thru arr1 for y thru arr2: print(x, y)

# Vectorized Function Call
print(<=.(a - arr, b))

# Including 'var' keyword which is the same as 'mut', var may replace mut in the long run
var x = 5
mut x = 5

# Generators # 15/10/16
func gen():
    var sticky x = 20
    yd x++
..
var a = gen()
var b = gen()
var c = run gen()

# Indentation
# Pluto0.0.83 supports both tabs and 4-space identation, but they must not be mixed.

# Function objects
var f = add
var f =: Func
var x = func (Int, Int)::Int

# Special Functions
convert() var d =: Person -> Dragon()
setIndex() arr[2] = 24
setList() var arr = List -> [1, 2, 3, 4]
setHList() var arr = List -> [1 2 3 4]
getIndex()  var b = arr[1]
getRange() for x thru arr[1:2:4]


# Type Parameters Refined # 17/10/16
func add(a=:$T, b=:T): a + b


# Ternary Operator # 18/10/16
    let a =: z == r ? 1 || 2
    let b = d > 6 ? 2 || 4.5
    let a =: x and y == z ? Int.nil || x == y ? z || x == z ? y || y == z ? x || x + y + z

# Lists and Tables  # 18/10/16
let hide boom =: [
    [[1, x == 0 : y == 2 ? ], [3, 5]],
    [[5, 6], [7, x == 0 ? 5 || 0 ]]
]

let list2D =: [,]

list2D[2,3] = 25

var map =: [
    a : [1 3 5]
    b : [2 4 6]
]

let x =: table[a]

let d =: [
    [1, 2, 3]
    [5, 6, 7]
]

let z = [
    a : 5
    b : 6
    c : 7
]


# Match Function # 19/10/16
match test(a, b):
    case 1 : print("Bang!")
    elif > 2 : print("Bang!")
    elif 3, 4 : print("Bang!")
    case 5 => b == 2: print("Bang!")
    else: print("Bang!")
..

# Symbols
# var ello = m{2x} # mathematical symbol
var ello = ast{- 5 {+ 2 5}}

# SETLIST # 22/10/16
var n =: MyNum = [1, 2, 3, 4]

# BITWISE OPERATORS # 22/10/16
var x = 2*&5
var y = 3*|x
var z = *!6
var a = *^7
var b = a*>7
var c = b*<7

# UNINDENTED BLOCK SPECIFIERS
- label
- mod
- skip

# LIST NEGATIVE INDEX
var array = [1:20]
array[-1] # references the last index

# CATCH # 03/11/16
func foo(a):
    try:
        bar(1, 3)
    catch (b::Banana|Guava):
        case === Banana: log(b.msg)
        case === Guava: log(b.msg)
    ..
    rt a
..

# TUPLES # 04/11/16 # Edited 06/11/16
var x, y = 5, 6
let d = [getTuple()] # packing a tuple
let arr = [for x thru [1:10]: 5x] # packing a generator
var tup = ,,getList() # unpacking a list
var tep = ,,generate() # unpacking a generator
let prop = get(): prop
    set(a, b): prop = a * b
prop = 1, 2
x, prop = 1, (2, 3)

match (a, b):
    case 'Hello', 'World': print(a, b)

if a, b == 1, 2: print('Hello')

# MATHEMATICAL EXPRESSION # 04/11/16
var f = 2.5
var i = 2f^3/(f-2)

# COVARIANT TYPE SPECIFICATION # 04/11/16
var f = Float: 2.3
var i = Int
var l = Int:[1, 2, 3, 4]
func add(a b = Int: 0): a + b
let a = Person:('Sven Rafsmord', 12)
let e = Car:('Camaro')
# Possible Ambiguity
if let x = Int: 5 # error!! There is no mbiguity since an if variable has to be initialised.
if let x = Int: 5:.. # good
# Inconsistencies
let x = Int[4, 3, 5] # error! now a wrong syntax
var u = [4, 3, 5] # dynamic
var u = Int:[4, 3, 5] # covariant
var u = Map = [4, 3, 5] # setList
var d = Car('Camaro') # dynamic
var x = Car:('Camaro') # covariant
var e :: Car:('Camaro') # strict


# TYPE CASTING # 04/11/16
var pers =: Person: Employee("Daniel", 25, "Game Programmer")

# CHAINED CONDITIONS # 04/11/16
if x < y & y < z:.. # notice!
if x < y < z:..

if x == y & y == z:.. # notice!
if x and y == z:..
if x == y == z:..

if x == y & y < z:.. # notice!
if x == y and < z:..

if x == y & a == b:.. # good. unique operands

# NO BREAK # 04/11/16
for x thru list:
    if x < y:
        break
nobreak:
    return y
return -1

# USEFUL FUNCTIONS < ITERATION FUNCTIONS # 04/11/16
for i, color thru enumerate(colors):
    print(i, color)

for color thru reversed(colors):
    print(color)

# DEDENT # 04/11/16
if a < b: print(a) \\ else: print(b)

# CONTEXT MANAGERS # 05/11/16

# NUMBER LITERALS # 05/11/16
var x = 5_000_000_f
var d = 0.56
var d = 1_000

# REFERENCES # 05/11/16
var bone = Bone
bone.parent = wref getSkeleton('Captain Jack Sparrow')
var bane = iso Bing
var dune = ref getNumber()

# GENERICS # 06/11/16
type Stack:
    var objects = $T[]

func main():
    var boo = Value{Int}

# MAP OBJECT VS INDEX OBJECT # 06/11/16
var list = [1, 2, 3, 4, 5]
var dee = list[5:3:4] # this is an index ref object
var boo = val list[2:3:4] # this is a map object

# DESTRUCTORS # 06/11/16
type Class:
    func self() # constructor
    func self(~) # normal destructor
    func self(!) # exception destructor

# SUPER # 06/11/16
type Employee[Person]:
	var job, company = Str
	func self(super(name, age), job, company)

var emp = Empoyee:(
    "David Copenhagen",
    45,
    "Managing Director",
    "Pharmadise, Inc."
)

# EXPLICIT SELF # 07/11/16
func toStr(person = Person):
	"[self.name]: [self.age]"

func verbose(person = Person):
	"[person.name] is aged [person.age]"

func verbose(::) # error! no longer supported

# CONSTRUCTORS # 07/11/16
func self(name, age)
func self(super(name, age), work, company)

# OBJECT REF CHAINING # 07/11/16
let dave = Employee()name('David Copenhagen')age(65)


# DESIGN PATTERNS # 08/11/16
type Singleton:
	var hide sticky count = Int:0
	var hide sticky single = Singleton
	func self(): # constructors can return sticky field of same type
		if count == 0:
			count++
			rt ref single = Singleton(1)
		else:
			rt ref single
	..
	func hide self(mock)
..

# MACROS: SYMETRIC BINARY FUNCTIONS # 08/11/16
@symetric
func +(s = Str, i = Int): s + i

# OTHER RADIX # 08/11/16
let a = b"010002"
let a = x"FE0223"
let a = o"563507"

# ASTRO # 08/11/16
I'm renaming Pluto from Bang to Astro, with an .ast file extention.

# TYPE HIERARCHY # 09/11/16
Any -> Indie, Array, Func, DataType
Array -> List, Buffer, Tuple, Str, Chars

# REVERTING to Old ASSIGNMENT 10/11/16
var name = Str:('Dave Mack') # constructor or a tuple
var age = Int:(5, 6) # a tuple of ints or a tuple cast
#### NOW #####
var name =: Str('Dave Mack')
var name =: Str = ('Dave Mack') # tuple casting
var age =: Int = [1, 2, 3, 4]
var age =: Int[1, 2, 3, 4]
var age =: Int = 5.0

# MANAGEMENT FUNCTIONS # 10/11/16
type Person:
    var name, race =: Str
    var age =: Int
    func self(set(name, age))
    func self(self(name, age), race)
    func set(name, age) # management function
..


# ANONYMOUS TYPES # 10/11/16
type [Thread]:
    func run(th =: Thread):
        playSong()
    func stop(th =: Thread):
        stpSong()
.start()


# CONSTRUCTORS/DESTRUCTORS  # 12/11/16
type Car:
    var model =: Str
    var year =: Int
..
func Car(model =: Str, age =: Int): # Constructor
    var x =: Car.new # A costructor can only create a new object of it's wn type
    x.name = name
    x.age = age
    rt x
..
# Destructors of a type can only be defined within the same module as the type
func Car(~) # Normal Destructor
func Car(!) # Exception Destructor

type Person:
    var name, gender =: Str
    var age =: Int
..
func Person(setMain(name, age))
func Person(self(name, age), gender)
func setMain(p =: Person, name =: Str, age =: Int): p.name = name; p.age =age

# PRINT FUNCTION  # 12/11/16
println('Hello, World!')

# BASE TYPES HIERARCHY  # 13/11/16
Any - Indie Func Array DataType
Array - List Buffer Tuple AbStr
AbStr - Str Chars

# MATCH FUNCTION # 13/11/16
match test(a = Int):
    when 1 : print("1") # when has an autmatic break
    case 2 : print("2") # no break
    case 3 : print("3") # no break
    else 4 : print("4") # default
..
# this also applies to select

# INHERITANCE # 13/11/16
type Employee <: Person

# LAMBDAS
array.filter(:[1] % 2 == 0)
------------------------------------------------------------------------------------------
# 08/11/16
# Bang0.0.83
func divideSelf(num = Int):
    toStr(num)
        .split()
        .noneMatch(:toInt([1]) == 0 | num % toInt([1]) != 0)
..

# 21/09/16
# one-line madness Pluto0.8.2 just for fun
# conditional sum function
func sum(a, b, c): a and b == c ? 0 :: a == b ? c :: a == c ? b :: b == c ? a :: a + b + c
# character duplicate clean function rewritten
func clean(input =: Str): input.filter do x: mut sticky y; y != x ? (y = x; true) :: false
# fibonacci function rewritten
func fib(n): if n <= 1: 1 $ else: fib(n - 1) + fib(n - 2)
# gcd function rewritten
func gcd(n m =: UInt64): @{assert n and m == 0}; while m != 0: if m < n: m, n = [n, m] $ n
# factorial function rewritten
func factorial(num = Int): mut x = num; while num > 1: x *= num-- $ x
# birthday function rewritten
print([:4].map(:"Happy Birthday to" + (_1 != 2 ? "you!" :: "dear Haibeey")))



# 21/09/16
# conditional sum function : Java vs Pluto0.8.2
int sum(int a, int b, int c){return a == b && b == c ? 0 : a == b ? c : a == c ? b : b == c ? a : a + b + c;}
func sum(a, b, c): a and b == c ? 0 :: a == b ? c :: a == c ? b :: b == c ? a :: a + b + c


# 20/09/16
# GCD: Rust vs Pluto0.8.2
# Rust
fn gcd(mut n:u64, mut m:u64)->u64{
    assert!(n != 0 && m != 0);
    while m != 0{
        if m < n{
            let t = m; m = n; n = t;
        }
    }
    n
}
# Pluto
func gcd(n m =: UInt64):
    @{assert n and m == 0}
    while m != 0:
        if m < n: m, n = [n, m]
    n
..
# Bang 0.0.83 # 07/11/16
func gcd(n m = UInt):
    @assert n and m == 0
    while m != 0:
        if m < n: m, n = n, m
    n
..

#10/09/16
# Haibeey
print(list(map(lambda x: "Happy Birthday to " + ("you" if x != 2 else "dear Haibeey"), range(4)))) # Python3
print(map(x -> "Happy Birthday to " * (x != 2 ? "you" : "dear Haibey"), 1:4)) # Julia
print([:4].map(:"Happy Birthday to" + (_1 != 2 ? "you" || "dear Haibeey"))) # Pluto0.8.2
# Bang 0.0.83 # 07/11/16
print([:4].map(:"Happy Birthday to" + ([1] != 2 ? "you!" || "dear Haibeey")))

#09/09/16
# Orobo's Challenge
func clean(input =: Str): "".concat(input.len() <= 1 ? input || input[0] == input[1] ? clean(input[1:]) || input[0] + clean(input[1:])) # java-like
func clean(input =: Str): input.filter do x : mut sticky y; y != x ? (y = x; true) || false # idiomatic

#08/09/16
# Austinoski BDay
import Gifts
func main():
    print("Happy Birthday Austin!")


# 17/08/16
type Ratio<T[Integer]>:
    mut priv num, den = T
    func (num, den := T):
        num and den == 0 ? raise DivideByZeroErr()
        mut div = gcd(den, num)
        .num = num / div
        .den = den / div
    ..
..

func swap!<T>(a b = ref T):
    a, b = b, a

func coroutine():
    for x thru [1:20]:
        yield x

func factorialRecursive(num = Int):
    if num < 2: num
    else: factorial(num - 1) * num
..

func factorial(num = Int):
    mut x = num
    while num > 1:
        x = x * num--
    x
..

# 21/08/16
func show99bottlesOfBeer():
    # 99 bottles of beer on the wall, 99 bottles of beer.
    # Take one down and pass it around, 98 bottles of beer on the wall.
    # ----------------------------------------------------------------
    # 1 bottle of beer on the wall, 1 bottle of beer.
    # Take one down and pass it around, no more bottles of beer on the wall.
    # ----------------------------------------------------------------
    # No more bottles of beer on the wall, no more bottles of beer.
    # Go to the store and buy some more, 99 bottles of beer on the wall.
    let a = "bottle"
    let b = "of beer"
    let c = "on the wall"
    let d = "Take one down and pass it around"
    let e = "no more"
    let f = "Go to the store and buy some more"
    for i thru [99:0]:
        if i == 1:
            print("[i] [a] [b] [c], [i] [a] [b].\n[d], [e] [a]s [b] [c].")
        if i == 0:
            print("N[e[2:]] [a]s [b] [c], [e] [a]s [b]\.\n[f], 99 [a]s [b] [c].")
        print("[i] [a]s [b] [c], [i] [a]s [b].\n[d], [i - 1] [a]s [b] [c].")
    ..
..

# 30/08/16
func fib(n):
    if n <= 1:
        1
    else:
        fib(n - 1) + fib(n - 2)
..


# 17/08/16
func main():
    print("Hello, World!")
    mut x, y = 7, 9
    swap(x, y)
    print(x, " ", y)
    print(coroutine())
    list(coroutine())
    factorial(5)
    factorialRecursive(7)
..
