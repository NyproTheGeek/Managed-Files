#14/05/16

Pluto is a flexible language. Its design process has also been very flexible.
What started as an idea two years ago (when I was thinking if there could be a graphical languge that made programming easy) has now become a text-based modern programming languge. My initial thought was along the line of Unreal Engine's blueprint but much more graphical. (I found out later that there is a language like that on code.google.com, though I can't remember the name now)
Last year I joined a Java group on whatsapp, it was one of the most exciting moments. I just finished learning Java and that woud be the perfect place to start working with other professional programmers. Then there was a time someone suggested setting up a Java project for people to contribute and learn from. People submitted their ideas and I submitted mine. But being an Advert and PR dude, I promoted my idea among the members and my idea got the highest vote. 
I named the language SimpleScript (which Okafor found out was taken) and I wrote the shortest language spec ever-imagined before the next day, an 11-page doc explaining mostly variable and function declarations. The language was pushed as a languge for beginning programmers, but I knew deep down that won't be true for long.
I wrote another spec for people dealing with the lang parsers. Back then I had the littlest idea about how compilation, interpreting, VM, bytecode, etc. work or how any of it makes sense.
Okafor set up a GitHub repo and a blogspot dev blog.
Aditya, Okafor, Olalekan, Ose, Adedolapo and I all started working on the parser. Like I said earlier we had no idea how it will all come together. Some were using regex, others were parsing the grammar token by token. I started with coding the token by token logic at first but quickly realised it was much more complex than I thought. Hard coding the syntax logic doesn't make sense for future mods. So I started drafting a syntax graph and I intended to store the token symbols and their corresponding handles in hashmap since the graph will be cyclical, the handles(keys) will be used to link tokens to each other. 
Okafor used regex but had problems with light(power shutdowns), which we all struggle with in Nigeria. Right now as I type, there is no light. 
Okafor gave up on the project. I did too after concluding that Compiler designers are insane sociopathic geniuses. I drew out a simple tree, but never got to implement it in code. 
Aditya's and Ose's hardcoded logic was not going to be helpful either, so the project went down the drain.
Until January [insert date here], Aditya called for the resuscitation of the project. I also didn't want the project to die. So there was a bit of a spark in the group again. I wrote another lang spec the next day for SimpleScript 0.2 and we decided to to change the name since SimpleScript was already taken. I suggested names, Ose did too, but Aditya couldn't afford to lose, so he suggested an insane amount of names. I chose a few out of all the suggestions and I voted Pluto. Like always I promoted the name and it got the highest vote. (Pluto is already taken BTW) So I got the SimpleMind map from playstore in an order to construct a mindmap tree of how the tokens will connect. As I did that, the language also changed at the same time as I noticed some flaws making the tree a whole lot more complicated. At a point I told Aditya to work on the lang IDE instead because the syntax graph had gotten so complex that I finalised once again that "Compiler designers are insane sociopathic geniuses".
The project stalled, with Aditya occasionally posting his fancy progress with the IDE. At that stage it was pretty much Aditya and I working on the project. 
Now it is me alone. And that was why I made the initial decision not to release a license early. I had the feeling I would be the single person to finish the ride. 
In March [insert date here], I worked on Pluto briefly (a week or so) and I changed a lot in the language and made it more modern, but I eventually decided to stop and focus on my 2D skeletal animation software project. 
However, recently I was making research on languages I can embed in my application. I reviewed Lua and Python, but eventually went with Python. I took a crash study on Python and found some interesting attributes to it that I needed to add to Pluto. The Sunday before the last, I revived full oncentration on Pluto. I paused all focus on my software just to work on Pluto and to probably finish its compiler and interpreter before I leave it alone again. My motivation was further increased by the encouraging words I recieved from the Python group I just joined and other groups where I posted the code snippets.
Given that I stay at home 24/7, I'm able to concentrate all efforts towards learning and research. Although power shutdowns (sometimes for days) and bad connection are challenges I face everyday. Even with these problems I've been able to gather so much knowledge in the past week.
Today, I've been able to close in on the syntax after two weeks of mods and I have decided Pluto will support multiple inheritance. And I'm currently looking at compiling down the code to LLVM IR instead of implementing a C VM. LLVM was a future consideration but the chances of adopting it now is higher. I discovered it has a VM for JIT'ed instructions.

See ya!

PS: I was able to write a syntax file for Pluto last week (took me two days to grasp). Sublime Text syntax hilighting feature makes typing Pluto digestable and easy to construct and reconstruct the lang.


#15/05/16
I'm so broke. Mum can give only what she has. There's no light for days. My data plan is running out. I'm frustrated because I'm unable to work. 
It is time I found a revenue channel. So yesterday, I finalised I would freelance. Promote myself under a new moniker and take on jobs from clients. I decided I would focus on front-end/back-end app development for Windows, Mac, Linux and Windows.
I'm currently split between choosing JavaFx and Qt. I would love to use Qt, but it requires compilation on each platform to be used on such platform (maybe I'm wrong). Although it would have increased my flexibility with the framework. It is a huge framework.
JavaFx also has its problem, even though it is compile-once-run-everywhere, it needs JRE installed on the platform before it can run. 
I think I will go with JavaFx. I should be able to bundle JRE with the app and it makes other things easy, e.g DBM with JDBC.

#25/05/16
There is still no light. In fact the last time there was light that lasted hours was on Saturday.
I'm still broke. The appCypher account hasn't earned me a client yet. 
Anyway, I'm back to drafting my TinyPose software and I've got a month to create something usable. 
This power out is killing me. It has been a thorn to my side. I have been stalled so much lately by these long periods of power shutdown. Dunno what is happening with the folks at the top, but they are killing the productivity and the motivation of the poor folks at the grassroot.
I'm always so demoralized whenever folks at PHCN switches on the Power just for them to switch it back off four seconds later. Not that I care so much when they switch it on, but it upsets me nonetheless. Would have been better if they didn't switch it on.
A programmer living in darkness.
My laptop is about to die...

#29/05/16
I'm changing TinyPose to Crude. I initially booked that name for my Pluto Language.
I might still change it later.

#31/05/16
I discovered KSI and Deji's channel yesterday. Unbelievable. Been on Youtube for years nw nad I'm just discovering them.


#24/07/16
Last year (or was it the year before?) I noticed that the way most approached AI was wrong. Building an adult-humanoid AI with photographic memory is perhaps the wrong way of developing AI. For me, I think an AI is meant to be grown, just like humans grow from being babies to being adults. The memory model used for AI too is ineffective. For examples we shouldn't record what an AI sees as videos files or what it it hears audio files. Those data types are meant for human perception only. An AI memory model should be about retrieving inputs in the form of textures, shapes or structural bits, that are stored and connected other related bits in a neural digraph. In short, it models how humans remember things. Humans don't remember things photographically, they remember it by piecing experiences together. 