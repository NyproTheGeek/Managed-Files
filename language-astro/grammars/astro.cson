# 14/11/16
# add folds and stuffs
fileTypes: [
    "ast", "astro"
]
foldingStartMarker: ":"
foldingStopMarker: "\\.\\.\\s*$"
name: "Astro"
patterns: [
    {
        include: '#non_astro'
    }
    {
        include: "#numbers"
    }
    {
        include: '#hints'
    }
    {
        include: "#brackets"
    }
    {
        include: "#comments"
    }
    {
        include: "#keywords"
    }
    {
        include: "#function_calls"
    }
    {
        include: "#dot_members"
    }
    {
        include: "#cpp_symbol"
    }
    {
        include: "#strings"
    }
    {
        include: "#regex"
    }
    {
        include: "#math_expressions"
    }
    {
        include: "#operators"
    }
]
repository:
    non_astro:
        patterns:[
            {
                begin: "^(?:[A-Z\\-]|\\-[ A-Za-z\\-])"
                beginCaptures:
                    "0":
                        name: "punctuation.definition.comment.begin.astro"
                end: "$"
                endCaptures:
                    "0":
                        name: "punctuation.definition.comment.end.astro"
                name: "comment.double-dash.astro"
            }
        ]
    hints:
        patterns:[
            # HINTS
            {
                match: "\\@(?:[A-za-z_][A-za-z_0-9]*)"
                name: 'support.function.macro.astro'
            }
            {
                begin: "\\@\\{\\s*[a-zA-Z_0-9]+\\s"
                beginCaptures:
                    "0":
                        name: 'support.function.macro.astro'
                end: "\\}"
                endCaptures:
                    "0":
                        name: 'support.function.macro.astro'
                patterns: [
                    {
                        include: "$self"
                    }
                ]
            }
        ]
    brackets:
        patterns: [
            {
                match: "(?:\\(|\\)|\\[|\\]|,)(?!('|(?:\\.'))*\\.?')"
                name: "meta.bracket.astro"
            }
        ]
    comments:
        patterns: [
            {
                begin: "#=|##="
                beginCaptures:
                    "0":
                        name: "punctuation.definition.comment.begin.astro"
                end: "=#|=##"
                endCaptures:
                    "0":
                        name: "punctuation.definition.comment.end.astro"
                name: "comment.block.astro"
            }
            {
                begin: "#|##"
                beginCaptures:
                    "0":
                        name: "punctuation.definition.comment.astro"
                end: "$"
                name: "comment.line.astro"
            }
        ]
    numbers:
        patterns: [
            # REAL NUMBERS
            {
                match: "\\b[+-]?[0-9]([A-Za-z0-9]_?)*(\\.([0-9]_?)*(e[+-]?)?([0-9]_?)+)?(_[A-Za-z0-9]+)?"
                name: "constant.numeric.astro"
            }
        ]
    keywords:
        patterns: [
            # CONSTANTS
            {
                match: '\\b(?:true|false|null)\\b',
                name: 'constant.language.astro'
            }
            # META VARIABLES
            {
                match: '\\b(?:_[A-Za-z0-9]*)\\b',
                name: 'variable.other.astro'
            }
            # LANG VARIABLES
            {
                match: '\\b(?:self|super|sub|outer)\\b',
                name: '' # 'variable.language.astro'
            }
            # CONTROL FLOW
            {
                match: '\\b(?:for|nobreak|if|where|\\?|opt|else|elsif|elif|rt|yd|while|redo|match|case|when|until|do|use|loop|label|op|block|try|catch|ensure|throw|err|next|break|skip|step|take|select|import|module|using|hiding|\\.\\.)\\b',
                name: 'keyword.control.astro'
            }
            # MODIFIERS
            {
                match: '\\b(?:sticky|ab|solo|const|priv|pack|pass|prod|prot|rpub|rpriv|rpack|rpass|rprod|wpub|wpriv|wpack|wpass|wprod|hold|nan|lock|iso|val|ref|wref|own|read|hide)\\b',
                name: 'storage.modifier.astro'
            }
            # CATEGORIES
            {
                match: '\\b(?:type|func|enum|flo|let|var|mod|as)\\b',
                name: 'storage.type.astro'
            }
            # CLASSES
            {
                match: '\\b(?:[A-Z][_A-Za-z0-9]*)\\b',
                name: 'support.class.astro'
            }
            # FUNCTIONS
            {
                match: '\\b(?:set|get|emit|run)\\b',
                name: 'constant.language.astro'
            }
            # OTHERS
            {
                match: '\\b(?:and|or|thru|in|not\\s+in)\\b'
                name: 'keyword.control.astro'
            }
        ]
    function_calls:
        patterns: [
            {
                begin: "([A-Za-z_][A-Za-z_0-9]*\\!?)\\s*(?:\\<(?:[A-za-z_][A-za-z_0-9]*,*)+\\>)?({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\("
                beginCaptures:
                    "1":
                        name: "entity.name.function.astro"
                    "2":
                        name: "keyword.operator.astro"
                end: "\\)(('|(\\.'))*\\.?')?"
                endCaptures:
                    "1":
                        name: "keyword.operator.transposed-func.astro"
                patterns: [
                    {
                        include: "$self"
                    }
                ]
            }
        ]
    dot_members:
        patterns: [
            # OTHERS
            {
                match: "(?<!\\.\\.)(?:\\-\\>|\\.)([A-Za-z_][A-Za-z_0-9]*\\!?)\\b"
                captures:
                    "1":
                        name: "variable.language.astro"
            }
        ]
    operators:
        patterns: [
                #PUNCTUATORS
                {
                    match: '(?:,|;|\\\\\\\\|:)',
                    name: 'keyword.operator.astro'
                }
                # ASSIGNMENT OPERATORS
                {
                    match: '(?:::|>:|<:)'
                    name: 'keyword.operator.astro'
                }
                # UNARY OPERATORS
                {
                    match: '(?:-|\\+|--|\\+\\+|\\.-|\\.\\+|\\.--|\\.\\+\\+|\\?)'
                    name: 'keyword.operator.astro'
                }
                # BINARY OPERATORS
                {
                    match: '(?:\\=|\\*|/|\\%|\\^|//|\\.\\*|\\./|\\.\\%|\\.\\^|\\.//|\\+=|-=|\\*=|/=|%=|\\^=|//=|\\.\\+=|\\.-=|\\.\\*=|\\./=|\\.%=|\\.\\^=|\\.//=)'
                    name: 'keyword.operator.astro'
                }
                # CONDITIONAL OPERATORS
                {
                    match: '(?:\\||>|<|>=|<=|!=|\\&)'
                    name: 'keyword.operator.astro'
                }
                # BITWISE OPERATORS
                {
                    match: '(?:\\!~|\\!\\||\\!\\&|\\!\\^)'
                    name: 'keyword.operator.astro'
                }
                # SHIFT OPERATORS
                {
                    match: '(?:\\!>|\\!<|\\!>=|\\!<=)'
                    name: 'keyword.operator.astro'
                }
                # OTHER OPERATORS
                {
                    match: '(?:>>|<<|\\,\\,)'
                    name: 'keyword.operator.astro'
                }
            ]
    cpp_symbol:
        patterns:[
            {
                begin: "(cpp)(\\{)"
                beginCaptures:
                    "1":
                        name: 'variable.interpolation.astro'
                    "2":
                        name: 'variable.interpolation.astro'
                end: "\\}"
                endCaptures:
                    "0":
                        name: 'variable.interpolation.astro'
                name: 'embed.cxx.astro'
                contentName: 'source.cpp'
                patterns: [
                    {
                        include: 'source.cpp'
                    }
                ]
            }
        ]
    strings:
        patterns: [
            # SINGLE-QUOTE STRING
            {
                begin: "'"
                beginCaptures:
                    "0":
                        name: "punctuation.definition.string.begin.astro"
                end: "'"
                endCaptures:
                    "0":
                        name: "punctuation.definition.string.end.astro"
                name: "string.quoted.single.astro"
                patterns: [
                    {
                        include: "#string_escaped_chars"
                    }
                    {
                        include: "#string_interpolate"
                    }
                    {
                        include: "#comments"
                    }
                ]
            }
            # NON-STANDARD SINGLE-QUOTE STRING
            {
                begin: "([A-Za-z0-9_]+\\.)(')"
                beginCaptures:
                    "1":
                        name: "support.function.macro.astro"
                    "2":
                        name: "punctuation.definition.string.begin.astro"
                end: "'"
                endCaptures:
                    "0":
                        name: "punctuation.definition.string.end.astro"
                name: "string.quoted.single.astro"
            }
            # DOUBLE-QUOTE STRING
            {
                begin: '"'
                beginCaptures:
                    "0":
                        name: "punctuation.definition.string.begin.astro"
                end: '"'
                endCaptures:
                    "0":
                        name: "punctuation.definition.string.end.astro"
                name: "string.quoted.double.astro"
                patterns: [
                    {
                        include: "#string_escaped_chars"
                    }
                    {
                        include: "#string_interpolate"
                    }
                    {
                        include: "#comments"
                    }
                ]
            }
            # NON-STANDARD DOUBLE-QUOTE STRING
            {
                begin: '([A-Za-z0-9_]+\\.)(")'
                beginCaptures:
                    "1":
                        name: "support.function.macro.astro"
                    "2":
                        name: "punctuation.definition.string.begin.astro"
                end: '"'
                endCaptures:
                    "0":
                        name: "punctuation.definition.string.end.astro"
                name: "string.quoted.single.astro"
            }
            # NON-STANDARD ONE WORD STRING
            {
                match: '([A-Za-z0-9_]+\\.)(?=`)'
                name: "support.function.macro.astro"
            }
            # NON-STANDARD SYMBOL
            {
                match: '([A-Za-z0-9_]+\\.)(?={)'
                name: "support.function.macro.astro"
            }
        ]
    string_escaped_chars:
        patterns: [
            {
                match: "\\\\(\\[|t|n|\"|\'|#|\\\\)" # \\.(\\[|t|n|\"|\'|#)
                name: "constant.character.escape.astro"
            }
            ]
    string_interpolate:
        patterns: [
            {
                begin: '\\[',
                end: '\\]',
                name: 'variable.interpolation.astro'
            }
        ]
    regex:
        patterns: [
            # REGEX
            {
                begin: "(?<=\\+|\\-|\\:|\\=|\\(|\\))\\s*\\/(?=!\\=)" # if preceded by an operator, then regex is assumed. lookkbehind works here. Yay!
                beginCaptures:
                    "2":
                        name: "punctuation.definition.string.begin.astro"
                end: "\\/"
                endCaptures:
                    "0":
                        name: "punctuation.definition.string.end.astro"
                name: "string.quoted.single.astro"
            }
        ]
    nest_parens_and_self:
        patterns: [
            {
                begin: '\\('
                end: '\\)'
                patterns: [
                    {
                    include: '#nest_parens_and_self'
                    }
                ]
            }
            {
                include: '$self'
            }
        ]

scopeName: "source.astro"
