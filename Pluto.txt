Revised 13/07/16

PLUTO's DESIGN PHILOSOPHY
- let it do more with less
- make it fast
- make it legible
- make it consistent
- make it flexible. Dynamic and statically typed
- make it lightweight

Pluto is a flexible language that is both be compiled and interpreted. It can used either as dynamically typed or a statically typed language. As a result it unifies rapid prototyping and fast performance into one cohesive syntax. 

PLUTO WORLD
- plutoSphere
- The interpreter
- The compiler
- LLVM IR
- Static vs dynamic

PLUTO DYNAMIC VS STATIC !! Needs Revision
- Pluto Dynamic Built-in types - Dyn, DynDouble, DynLong, DynBool, DynChar
- Pluto Static Built-in types - Int, Int16, Int32, Int64, UInt, UInt32, UInt64, Float, Double, Bool, String, Char, Byte, SByte, Complex, Complex1287

TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
AUTOMATIC REFERENCE COUNTING
    type Skeleton:
        bones List<Bone*>
    ..
    type Bone:
        skel** Skeleton
    ..
- look at sharedptr in C++
- so existence of both strong/weak referencing and equal referencing.
- there can only be one strong ref to an object
- cyclical ref in equal referencing is explicitly solved using mechanism.
MULTIPLE VARIABLE DECLARATION
- I need to find a way around the function multiple declaration problem.
    add (a, b, c UInt) Int
    add (a : 1, b : 2, c UInt : 3) UInt
    add (a : 1, b : 2, c : 3 UInt) UInt
ARGUMENT NAMING
- A developer can optionally name the arguments he is passing to a function. The name of the argument must be the same as the name of the corresponding parameter.
    addPerson(name : 'Aditya', age : 28)
UNION TYPING
    myNumber Byte&Int
VARIABLE TYPING
    myNumber Byte|Int
DECLARATIVE PLUTO ".deplu" #27/06/16
    person:
        name : "Nypro"
        fat : false
        tall : true
        hobby : 'programming'
        single : _ # underscore as a value signifies empty
        children : [2, 3, 4, 6]
        gamesLiked : name, releaseDate, hard [ 
            ("Crysis", 2007, _),
            ("Unreal Tournament", 1999, true),
            ("Portal 2", 2011, true),
        ]  
    ..
A comma can be replaced by a newline
TABLES
    candidate Int String : [1, 'Aditya' | 2, 'Nypro']
    candidate Int String : index, name [1, 'Aditya' | 2, 'Nypro']
ASSERTION
    assert x == null
    assert x == null : print("Hello")
SKIPPING BLOCKS
    if x == 5 : <3> print('Hello') # block is skipped after the it has been executed 3 times.
RAISED TO POWER
    x ^ 2
BLOCKS RULES
- empy blocks should not be preceded by colon or block end
- can't have more than one block on a line, with the exception of chained blocks (if-else)
DUCK TYPING EXAMPLES
    getArea(length, breadth):
       rt length * breadth
    ..
    length : 10
    breadth : 25
    rectangleArea : getArea(length, breadth)
VARIABLES AND SHADOWING
- In python names are allowed to change refeerence. This is called shadowing.
- Pluto doesn't support shadowing, a name is bound to its inferred type.
MULTIPLE CLASSES IN A FILE
type Person
type Company 
type Multiple
PLUTO USES 1-BASED INDEXING 15/07/16
- So after looking at Julia, I believe 1-based indexing is the way to go.
- And I will also introduce three more meta variables along with _end
    arr[1...3] # index 1 to 3
    arr[_last] # last index
    arr[_end] # _last + 1
    for i : 1; i < arr.end; i++:
        print(arr[i])
    ..
    for i : 0; i < arr.last; i++:
        print(arr[i++])
    ..
- I believe I have catered slightly for begrudging 0-based index lovers.
- However it is important to keep in mind that Pluto uses 1-based index always. 
Using the 1-based index makes the whole language coherent and slicing, array length fits nicely.
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO


--! THE EXAMPLES BELOW ARE STATICALLY TYPED !--

SINGLE-LINE COMMENTS
    # Hello


MULTILINE COMMENTS
    .# 
    I'm Pluto
    I'm cool
    .#


DOCUMENTATION
    # <code> Car </code>  class is deprecated # xml
    # [ code: 'Car' ] class is deprecated # deplu


VARIABLE DECLARATION & INITIALIZATION 
    x : 10
    y : 12f
    z : 'Hello'
    a Car : ('Camaro')
    b : Car('Camaro') # error. redundant assignment
    b : Car('Camaro').setDate(2014) # Car object must be part of an extensive expression
    c Car ; c = ('Camaro') # comma is used to separate two statements 
    n : getCar('Camaro')
    o : add(2, 4) 
    p List<Car>(3) # generics


CONSTANT VARIABLE DECLARATION
    let x : 25
    let y Car : ('Camaro')


MULTIPLE ASSIGNMENT
    a, b, c : array[2...5] 
    x, y : y, x
    a, b, c, d : 1...5 


NUMERIC FORMATTING
    x : 1_000_000
    y : 1_999.99


ARRAYS # are imlemented as matrices and vectors by default with column-major order
    f [2] Car : [('Camaro'), ('Mustang')]
    g [3] Car ; g [...] = [('Camaro'), ('Mustang'), ('Maserrati')]
    h [] Car ; h [+2] = [('Camaro'), ('Mustang')] 
    i [] Car ; i [+3] ; i [...] = [('Camaro'), ('Mustang'), ('Maserrati')]


ARRAY SLICING
    arr [6] Int : [1, 2, 3, 4, 5, 6]
    print(arr[1...3]) # first index to the third
    print(arr[...5]) # first index to the 5th index
    print(arr[3..._last]) # 3rd index to the last
    print(arr[-3...]) # from the 3rd index but backwards
    newArr [] : arr[...] # all elements
    list(arr[_last...]) # list from behind


MULTIDIMENSIONAL ARRAY
    arr [2, 2] Int : [1, 2 | 3, 4]
    arr [2, 2, 2] Int : [1, 2 | 2, 3 || 4, 5 | 6, 7]  
    arr [2, 2] Int : [1, 2 | 3, 4]
    arr [2, ] Int ; arr [, +2] = [1, 2 | 3, 4]
    list(arr [...])
    list(arr[2, ...]) # list columns in row 2
    list(arr[..., 2]) # list rows in col 2


RAGGED ARRAY # is untidy !! Needs review
    arr [2, ] Int
    arr [0, +2]
    arr [1, +3]
    arr [0, 0, +3] ; arr [0, 1, +3] 
    arr [1, 0, +4] ; arr [1, 1, +5] ; arr [1, 2, +6]


ARRAY OBJECT COMPARISON
    arr1 < arr2 # true if element size of arr1 is lesser than that of arr2
    arr3 [] : arr1 \ 2 # divides all elements by 2


TABLES # specifying dimen in tables are kinda pointless, they can shrink and grow
    candidate Int String : index, name [1, 'Aditya' | 2, 'Nypro'] # table can grow col or row-wise
    list(candidate) # 1, 2, 'Aditya', 'Nypro' # column-wise listing
    list(candidate[]) # 1, 2, 'Aditya', 'Nypro' # column-wise listing
    list(candidate[...])  1, 'Aditya', 2, 'Nypro' # row-wise listing
    list(candidate.index) # 1, 2
    list(canditate[..., 1]) # 1, 2
    list(candidate(2, name)) # 'Nypro'
    cars [2] Int String: [1, 'Camaro' | 2, 'Mustang'] # specify col size using array operator
    list(cars(1)) # 'Aditya'
    cars.add(3, 'Bentley')
    cars[3] = 'Bentley'
    x : car[3]
    cars.remove(2)
    cars [2, 2] # access element on 2nd row, 2nd column


MATRIX-VECTOR OPERATIONS # column major order
    m [] : Mat.identity(4, 4)
    n [] : [1, 1, 1, 0]
    t [] : m \ n # column-major order
    u [] : [2, 4, 3 | 3, 1, 5] * [3, 10 | 4, 2 | 1, 7]
    mRows, mCols : m.size()
    list(arr[2, ...]) # list columns in row 2
    list(arr[..., 2]) # list rows in col 2
    list(m) # column-wise listing
    list(m[]) # column-wise listing
    list(m[...]) # row-wise listing
    z [] : {u'} # z is assigned transpose of matrix u 


STRING TYPE
    myStr1 String : ("Hello")
    myStr2 String : ('Hi')
    myStr3 : 'Halo'
    myStr4 : "Bonjour"


STRING INTERPOLATION AND CONCATENATION
    name : 'Pluto'
    time : 2015
    '$name is a language started in $time'
    name + ' is a language started in ' + time


ESCAPE SEQUENCE
    .$ .t .n ." .' .#
    \$ \t \n \" \' \# \. \\


MULTILINE STRINGS 
    ." 
    Hello
    Folks
    ."


VERBATIM STRING
    '''Use \t for tab and \n for newline'''
    """Use \t for tab and \n for newline"""


IF SATEMENT
    if myMoney == 50 :
        print "Hello, World"
    ..
    if x == 3 : print ('Hello') ..
    if x == 1 :
        print x
    elsif x == 2 :
        print x
    else :
        print 'invalid value'
    ..
    if x : # if x does not equal nil
       print 'x has been assigned to'
    ..


FOR LOOP
    for i : 0 ; i <= 10 ; i++ :
        a += i
        if  i % 2 == 0 :
            print(i)
        else :
            next 
    ..


LOOP
    loop :
        if x != 0 :
            print ('Hi')
        else :
            break
        ..
    ..


WHILE LOOP
    while myBool == true :
        print ('Hello ')
    ..

  
DO WHILE LOOP
    do :
        print ("Hello ")
    while myBool == true


UNLESS LOOP # useful because you know the terminating condition
    unless myBool == true :
        print ("Hello ")
    ..


DO UNLESS LOOP
    do :
        print ("Hello ")
    unless myBool


LABELS
    outer:
    for i in 1...10 :
       for j in 1...10 :
           print('i : $i j : $j')
           if j == 5:
               next outer
           ..
       ..
    ..


CONDITION LIST
    if myVar == a | == b | == c :
        print myVar
    ..
    if x == y == z :
        play()
    ..


TERNARY OPERATOR
    myVar1 : myBool == true : 5 -- 6
    if x == 5 : print('hello') -- print ('bye')


RANGE
    x, y, z = 1...4


IN
    if x in 2...4 : print('Hello')  


WHERE 
    arr [] : x * 3 -> x in 1...30 -> x ^ 2 < 3


FOR/IN
    for x -> x in 1...20: # long form
        print (x)
    ..
    for x in 1...20: # short form
        print(x)
    ..


COMPREHENSION LIST
    arr [] : x * 3 -> x in 1...30 -> x ^ 2 < 3


IN/STEP
    for x in 1...6 step 2:
        print(x)
    ..
    if x in 1...10 step 2 -> x == y:
        print(x)
    ..


NOT IN
    a [] : x -> x in 0...20 -> x not in 2...5


NIL CONDITION
    if let x : getValue() : # x is available only in the if branch
        print(x)
    else:
        print('can't get value')
    .. 
    if let name : getChars() -> name.characters.count in 4...5:
        print ('hello')
    if x : getString() : print(x) | else : print('x is nil')


ONE-LINE BLOCK
    addTwo(a, b Int) Int:
        print (a + b)
        rt a + b
    ..
    addThree(a, b, c Int) Int: print (a + b + c) ; rt a + b + c 
    if x == y
    if x == y : print(x) 
    if x == y : print(x) ; print(y)
    x == y : x -- y


USE BLOCK
    add (x, y Int):
        use x, y :
            rt x + y 
        ..
    ..


NAMED BLOCK
    block y :
        m =  a + b
        n = m + a + b
    .. 
    if m < 2:
        goto y
    ..


UNNAMED BLOCK
    block:
        m = a + b
        n = m + a + b
    ..


METHOD DEFINITION
    addTwo(a Int, b Int) Int:
        rt a + b
    ..


COMPOUND FUNCTIONS
    getValue Int:
        x : 1, y : 2 Int
        () :
            rt x + y
        ..
        (a Int) :
            rt x + y + a
        ..
        (a, b Int) :
            rt x + y + a + b
        ..
    ..


VARIADIC PARAMETERS
    add(first, arr [] Int) Int:
        tmp : first + arr
        for x in arr:
            tmp += x
        ..
        rt tmp
    ..
    a : add(1, 2, 3, 4, 5, 6)


UNOVERLOADABLE METHODS
    add(args [])
    ::T:: add(args [ ] T) T


PASSING FUNCTION AS ARGUMENT
    addThree(a, b, c, myFunc(Int, Int) Int) Int : 
        rt myFunc(a, b) + c
    ..


RETURNING AN ARRAY
    addThree (a, b, c Int) [3] Int :
        rt [...3] = a + b, a + c, b + c
    ..
    p, q, r : 1, 2, 3
    x, y, z : addThree(p, q, r)
    w : addThree(p, q, r)[1] + z

    addSubTwo(a, b Int) [2] Int :
       rt [1] = a + b
       rt [2] = a - b
    ..


RETURNING A TABLE
    getUser(u User) String Int :
        ret u.name, u.age
    ..
    x [1, 1] : getUser( )


FUNCTION OBJECTS
    add2 Func : add
    add3 Func : add2


CLOSURE
    outer( ) :
        a Int : 6
        rt (b Int) : a + b
    ..
    add Func : outer
    sum Func : outer


ANONYMOUS CLASSES
    keyListener(Event e) : e.printText( ) ..
    keyListener( 
        Event () :
            printText( ) :
                print ('Hello, World')
            ..
        ..)
     
 
LAMBDAS
    keyListener(Event e) : e.printText() ..
    keyListener(
        Event () : 
            printText() : 
                print ('Hello, ')
            ..
        ..)
    keyListener(() : print ("World")) # lambda


COROUTINES
    y : addThree(3, 5)
    addThree.send(y)
    y = addThree.next()

    addThree(a, b Int) Int:
        q : yield a + b ; take r Int
        yield q + r
    ..


EVENTS
    event mathOps (Float, Float) Float
    mathOps += add, subtract, divide
    mathOps -= divide
    event buttonPressed : createProject
    buttonPressed += addNewEvent 


CLASS DEFINITION
    class Car :
        name, model String
        (name String) :  # Constructor
            self.name = name
        ..
        (self.name, self.model)
    ..


SELF REFERENCE
    class Car :
        name, model String
        (name String) :
            .name = name
        ..
        (.name, .model)
    ..


DESTRUCTORS
    class Car :
        name, model String
        (name String) :  # constructor
            self.name = name
        ..
        (.name, .model)
        (~) : # destructor
            print 'Object Deleted!'
    ..


MODIFIERS
- No public modifer, members are all public by default
    priv a : 10
    pack b : 'HELLO'
    pass a : true # synon with protected
    prod let x : 5f # synon with internal
- proj(ect), prod(uction), prog(ram) clashes with prot(ected)


PACKAGE ACCESS LEVEL
    pack< date Date 
    pack>> isbn Long 


READ-ONLY WRITE-ONLY ACCESS
    rpriv, rpack, rproj
    wpriv, wpack, wproj


MODIFIER BLOCK
    mod priv let :
        x : 45
        y : 2.5f
        z : false
    ..


MODIFIERS IN LIST DECLARATION
    priv let i, j Int


PROPERTIES / GETTERS SETTERS
    myVar1 : set(a, b, c Int) Int: rt x : a * b * c ; get( ) Int: rt x
    myVar1 = (1, 2, 3)
    myVar2 : 
        set(a, b Int) Int: rt x : a * b * c
        get( ) Int: rt x
    myVar3 : get()Int: rt myVar1


    TYPE CHECKING
    if myCar == Car :
        print 'Type is a Car'
    ..
    if myCar == Car.(sub) :
        print 'Type is a sub-class of Car'
    ..
    if myCar == Car.(super) :
        print 'Type is a super-class of Car'
    ..
    :: T[Vehicle.(sub)] ::
    class Transportation :
        myVehicle1 T
        myVehicle2 T
    ..


IMPORT STATEMENT
    import pluto.io.Console
    from pluto.io.Console import print, println


TYPE ALIAS
    Int as Meter
    import pluto.io.Console as Cons


INHERITANCE # Not Finalized!
    type Animal :
        move( ) :
        ..
    ..
    type Bird [Animal] :
        override move( ) :
        ..
        fly( ) :
        ..
    ..
    type Horse [Animal]:
        override move( ) :
        ..
        gallop( ) :
        ..
    ..
    type Pegasus [Bird, Horse] : # inherits Bird and Horse classes
        override move( ) : # certain conflicts must be overriden
        ..
    ..


METHOD CHAINING
- Method chaining is automatic, no need to return self
    type Math:
        value Float

        add(a, b Float) Float:
            value = a + b ;
        ..
        subtract(a, b Float) Float:
            value = a - b ;
        ..
    ..
    m Math
    m.add(1, 2).subtract(3, 4)


STICKY TYPES
    sticky type TempConv:
        convToFahr(celsius Float) Float
        convToCelsius(fahr Float) Float
    ..


STICKY TYPES MEMBER
    type Person:
        name String
        age Int
        sticky let specie : 'Homo Sapiens'
        (.name, .age)
        sticky getSpecie() String: rt .specie
    ..

   
STICKY CONSTRUCTOR
    sticky class :
        x, y Int
        (): # they can't have parameters. They only initialise class fields at first use
            .x = 2
            .y = 3
        ..
        add (x, y Int) Int :
            rt a + b
        ..
    ..


STICKY LOCAL VARIABLES
    add(a Int) Int:
        sticky sum : a
        rt sum += a
    ..


HOLD VARIABLES
    for x in 1...50:
        hold x : 0
        print(x * y)
        x++
    .. 


DOWNCASTING ! Needs review
    # assuming Movie and Song extends MediaItem
    for item in library:
        if item == Song:
            print('Song: [song.name]')
        elsif item == Movie:
            print ('Movie: [movie.name]')
    ..


GENERICS
    @deprecated
    ::T [String | Int], U::
    class DataManager:
        T dataID
        U dataX 
        U dataY 
    ..
    object DataManager<String, Car>


ENUMS
    enum RealNum: decimal (/\d|\d+\.\d+/), scientific(/\d\.\d+e[\-\+*]\d/)
    checkNum(rn RealNum): 
        if rn == decimal: print('[rn] is decimal') 
        elsif rn == scientific: print('[rn] is scientific')
    ..


CASES
    a : 'world'
    b : 5
    case test (String, Int)
    if test(a, b) : print ('Hello .[a]')


REGEX
    y : /\w/ # another regex literal
    if('Hello' == y)
    number Regex : /\d+/


PATTERN MATCHING
    type User; type Account; type PayPal [Account]; type Bitcoin [Account]

    case test (String, Account) ; case ppl (PayPal) ; case btc (Bitcoin)
    mary User
    eval mary :
        test (.name, ppl (.account)) : print ('[name] : [account]') # covariance in case matching
        test (.name, btc (.account)) : print ('[name] : [account]') # covariance in case matching
    ..


EVAL
    case test (String, Account)
    eval user :
        test (.name, .account) : print ('[name] : [account]')
        User : print (val.toStr( )) // val is an alias to the evaluated
        else : print ('Unkown') // default
    ..


EXPLICIT TYPE CASTING
    x Int : 5
    y Byte : 6
    let z : y + Int(x)


STACK EXPRESSION
    a : add (x, y) >>> subtract(_, z) # _ represent the value passed from preceding method
    a : subtract(_, z) <<< add (x, y) # same as above


MOVE SEMANTICS
- Move feature is automated in Pluto in any place where it is possible. But you can still explicitly specify it.
    x : _move(getPerson('Akinyemi'))


OPERATOR OVERLOADING
    _++(obj Stack<T>): # overloading plus operator
        obj.swap(top)
    ..
    _() (String) String: # overloading call operator
        rt '[.x], [.y]'
    ..
    _ (String) String: # overloading cast operator
        rt '[.x], [.y]'
    ..


TRY & ASSOCIATES
    main():
        ensure:
            file.close()
        ..
        # can be seperated from try/catch statement
        # in that case it acts like defer
        print("Hello")
        print ("Nigeria")
        try file.open()
        catch(fnfe FileNotFoundErr):
            printErr('Can't find file!')
        ..
    ..
    try:
        file.open()
        file.write('Hello')
    catch(fnfe FileNotFoundErr):
        printErr('Can't find file!')
    ..
    try:
        file.open()
        file.write('Hello')
    catch(fnfe FileNotFoundErr):
        printErr('Can't find file!')
    ensure:
        file.close()
    ..
    try let x : getObject()
    except x == nil :
        print('x is nil')
    ..
    try:
        let x : getObject()
    except x == nil:
    catch(ne NilErr):
        printErr('x can't be nil!')
    ..
    try:
        let x : getObject()
    except x == nil: 
        throw NilErr
    catch(ne NilErr):
        printErr('x can't be nil!')
    ..
    try:
        file.open()
        let x : file.readLine()
    except x == nil: 
        throw NilErr
    catch(ne NilErr):
        printErr('x can't be nil!')
    catch(fnfe FileNotFoundErr):
        printErr('Can't find file!')
    ensure:
        file.close() 
    ..


ITERATORS (?)


FLOATING POINT BITWISE OPERATORS (?)


META FUNCTIONS
    a : _type(b)   # pass type
    c : _ref(b)   # to explicitly pass by ref (equal)
    d : _weakRef(e)  # to explicitly pass by ref (weak)
    e : _value(f)   # to explicitly pass by value
    x : _move(y)  # move ownership, works only if the lhs is the owner of the object
    d : c    # default, determined by lang
    i : _min(Int)


CONTEXT SPECIFIC META VARIABLES
    arr[_last] = 20
    if(x == _even)
    if(y == _odd)
    if(a == _max)


COMPLEX, QUATERNION DECLARATION 
    x : 5 + 2i # complex
    y : 5 + 2i + 3j + 4k # quaternion 
 

MATHEMATICAL EXPRESSION
    f : 4f # f is a literal specifier here for f32
    g : {2/(4f^2) - 1 + (x-1) + 1} # f is a coefficient here
    h : {3f * 2g/5}f # the first f is a coefficient, the second f specifies that expression uses f32 operations. It is by default f
    i : {3x + y(4f^2) - 2/d} # y is a coefficient here, not a function call
    j : {3x + $y(4f^2) - 2/d} # y is a function call here


NUMERIC CLASS
    x : UInt.max
    y : Int32.min()
    z : {2x + 4y/3}.round() + (24.25/4).floor()


RATIONAL NUMBERS !! Needs review 
    x : 2//3 
    x.toFloat() # rational format can be changed to fp
    r : (2.3).toRatio() # but fp can't be changed to rational format (??)
    y : 4//6 ; print(y) # 2//3
    4//2 == 1//2 # true
    4//2 == 0.5 # true
    

INTEGER BITWISE OPERATORS
    myVar : 2.&2 # and
    myVar1 : 2.|2 # or
    myVar3 : ~2 # exclusive or


SHIFT OPERATORS
    myVar : 4<<1
    myVar : 2>>2


BINARY LITERALS
    myVar : 0b11001001


HEXADECIMAL LITERALS
    myVar : 0x5eff77


OCTAL LITERALS
    myVar : 0o56773


UTF CHARACTERS
    char : '\u6E'


ITERABLES
- Coroutines
- Range
- Array objects
- Iterable SubClasses


CLASSES OF OBJECTS
    Any
    Func
    Var
    Arr
    Tab


PREDEFINED TYPES # These types are optimized as part of the lang
    Int, Int16, Int32, Int64
    UInt, UInt16, UInt32, UInt64
    Float, Double
    Num
    Bool
    String
    Char
    Byte
    SByte
    Comp, Comp128
    Quat, Quat256
    BigInt
    BigFloat
    Ratio


NUMERIC LITERALS
    123
    123ui
    123b
    123sb
    123f
    123.0
    123.4
    123.4f
    123.4
    1.234e-2
    1.234e-2f


LOGICAL vs BITWISE OPERATORS 
    ! & | 
    ~ .& .|


ATTRIBUTES
    @deprecated
    @stub
    @maintain


BUILT-IN TYPES and PARENTS
    Obj (0.4)
    Nil (0.4) 
    String  (0.6.1)
    Int (0.4)
    Float (0.4)
    Num (0.4)
    Double  (0.6.1)
    Bool (0.4)


KEYWORDS
    stick (0.4) sticky  (0.6.1) 
    #pub (0.4) public (0.6.1) pub
    priv (0.4) private (0.6.1) priv
    pro (0.4) protected (0.6.1) prot
    pack (0.4) package (0.6.1) pack
    class (0.4) 
    rt (0.7.2)
    def (Rev 0.5.2)
    let (Rev 0.5.2)
    get (Rev 0.5.2)
    set (Rev 0.5.2)
    as (0.8)
    if
    else
    elsif
    while  (0.6.1)
    eval (Rev 0.5.2)
    for
    do
    until (0.6.1)
    next (0.6.1)
    break
    label (0.7.0)
    fixed
 

OPERATORS
    +
    -
    *
    /
    // # for ratios
    ^
    %
    --
    ++
    =
    +=
    -=
    *=
    /=
    //=
    ^=
    %=
    ==
    !=
    !
    >
    <
    >=
    <=
    &
    |
    ~
    .|
    .&
    >>
    <<


SYNTACTIC SYMBOLS
    |
    *
    ~
    @
    .
    :

