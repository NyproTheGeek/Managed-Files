Revised 13/07/16

PLUTO's DESIGN PHILOSOPHY
- let it do more with less
- make it fast
- make it legible
- make it consistent
- make it flexible. Dynamic and statically typed
- make it lightweight

Pluto is a flexible language that is both be compiled and interpreted. It can used either as dynamically typed or a statically typed language. As a result it unifies rapid prototyping and fast performance into one cohesive syntax. 

PLUTO WORLD
- plutoSphere (advanced IDE)
- The interpreter
- The compiler
- LLVM IR (bytecode representation)
- Static and Dynamic. Interpreted and Compiled.

PLUTO DYNAMIC VS STATIC !! Needs Revision
- Pluto Dynamic Built-in types - Dyn, DynDouble, DynLong, DynBool, DynChar (??)
- Pluto Static Built-in types - Int, Int16, Int32, Int64, UInt, UInt32, UInt64, Float, Double, Bool, String, Char, Byte, SByte, Complex, Complex1287, ...

TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
AUTOMATIC REFERENCE COUNTING
    type Skeleton:
        bones List<Bone*>
    ..
    type Bone:
        skel** Skeleton 
    ..
- look at sharedptr in C++
- so existence of both strong/weak referencing and equal referencing.
- there can only be one strong ref to an object
- cyclical ref in equal referencing is explicitly solved using mechanism.
MULTIPLE VARIABLE DECLARATION
- I need to find a way around the function multiple declaration problem.
    add (a, b, c UInt) Int
    add (a : 1, b : 2, c UInt : 3) UInt
    add (a : 1, b : 2, c : 3 UInt) UInt
ARGUMENT NAMING
- A developer can optionally name the arguments he is passing to a function. The name of the argument must be the same as the name of the corresponding parameter.
    addPerson(name : 'Aditya', age : 28)
UNION TYPING
    myNumber Byte&Int
VARIABLE TYPING
    myNumber Byte|Int
DECLARATIVE PLUTO ".deplu" #27/06/16
    person:[
        name : "Nypro"
        fat : false
        tall : true
        hobby : 'programming'
        single : _ # underscore as a value signifies empty
        children : [2, 3, 4, 6]
        coord : [x : 5]
        coords : [x : 1, y : 2, z : 3]
        gamesLiked : name, releaseDate, hard [ 
            ["Crysis", 2007, _],
            ["Unreal Tournament", 1999, true],
            ["Portal 2", 2011, true],
        ]  
    ]
A comma can be replaced by a newline
TABLES
    candidate Int String: [1, 'Aditya' | 2, 'Nypro']
    candidate Int String: index, name [1, 'Aditya' | 2, 'Nypro']
SKIPPING BLOCKS
    [skip : 3]
    if x == 5 : print('Hello') # block is skipped after the it has been executed 3 times.
RAISED TO POWER
    x^2
BLOCKS RULES
- empy blocks should not be preceded by colon or block end
- can't have more than one block on a line, with the exception of chained blocks (if-else)
DUCK TYPING EXAMPLES
    getArea(length, breadth):
       rt length * breadth
    ..
    length : 10
    breadth : 25
    rectangleArea : getArea(length, breadth)
VARIABLES AND SHADOWING
- In python names are allowed to change refeerence. This is called shadowing.
- Pluto doesn't support shadowing, a name is bound to its inferred type.
MULTIPLE CLASSES IN A FILE
    type Person
    type Company 
    type Multiple
PLUTO USES 1-BASED INDEXING 15/07/16
- !! Im removing this distinction soon. Only _end meta will exist
- So after looking at Julia, I believe 1-based indexing is the way to go.
- And I will also introduce three more meta variables along with _end
    arr[1...3] # index 1 to 3
    arr[_last] # last index
    arr[_end] # _last + 1
    for i : 1 | i < arr.end | i++:
        print(arr[i])
    ..
    for i : 1 | i < arr.last | i++:
        print(arr[i++])
    ..
- I believe I have catered slightly for begrudging 0-based index lovers.
- However it is important to keep in mind that Pluto uses 1-based index always. 
Using the 1-based index makes the whole language coherent and slicing, array length fits nicely.
WILL PLUTO BE HOMOICONI?
- I've gone too far into the syntax design. I'm not sure if it will
MULTIPLE DISPATCH
- Since deplu is both a static and dynamic language, meaning it is going to determine certan things at both compile time and runtime, it only makes sense for it to support Multiple dispatch. Thanks to Julia.
PLUTO STANDARD LIBRARY
- Pluto std lib will be statically typed with few dynamic types where appropriate.
EMPTY FUNCTION
- Warning is issued when you declare an empty function, cos you might think you are calling a function
    add() # warning if add is not already declared
AI
- Pluto is going to have crertain nconventional AI constructs in the future
LEAST TODO FOR PLUTO2017.1
- Concurrency 
- Standard library
- IDE
- Compiler
- Interpreter
- VM
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO


--! THE EXAMPLES BELOW ARE STATICALLY TYPED !--
IN OTHER TO BALANCE UP WITH PLUTO DYAMIC SIDE
THIS IS THE PROPOSED DECLARATION SYNTAX FOR
PLUTO2016.8.1
- the former : for variable declaration causes noise when on the same line as : for block declaration,
- So I'm considering := for variable declaration
    a := Str('Hello')
    b := 12
    add(a := Int, b := UInt) Int: rt a + Int(b)
    add(a, b := Int) Int
    a := nil
    b := Str
    c := Int[1, 2, 3, 4, 5] # array # traditional array
    g := [1, 2, 3, 4, 5] # list # like types stored together
    d := Int[]
    e := [5]
    f := ['Tola', 1.2, 50]
    h := names, ages['Tola', 25]
    i := ['Tolu', 12]
    j := Int[,] [1, 2, 3 | 2, 4, 6]
    k := Int[,]
    l := k[1, 2]
    m := Method(add)
    n := Event(add)
PROPOSED FOLDLEFT FOLDRIGHT
    myList := [1, 2, 3, 4]
    myList.foldleft(0, (a, b): rt a + b) # (((0 + 1) + 2) + 3) + 4 = 10
    myList.foldRight(1, rt _1 * _2) # (((1 * 4) * 3) * 2) * 1 = 24
RANGE IMPROVED
    for x thru 1...(20 - 1)
NIL CATCHING
    someone := (person.getData().getAge())? _arg | else: printErr('someone is no one') # problematic if _arg is a bool object
    someone := (person.getData().getAge() == nil)? _arg | else: printErr('someone is no one') # better
    try someone := person.getData().getAge() | except: printErr('someone is no one') # better still, except with empty case is true for any nil case
DEPRECATING
    .=, ++, -- # ++ and -- returns result after mutation
- C-style for-loop will deprecated in favor of for-thru



SINGLE-LINE COMMENTS
    # Hello


MULTILINE COMMENTS
    .# 
    I'm Pluto
    I'm cool
    .#


DOCUMENTATION
    # <code> Car </code>  class is deprecated # xml
    # [ code: 'Car' ] class is deprecated # deplu


VARIABLE DECLARATION & INITIALIZATION 
    x : 10
    y : 12f
    z : 'Hello'
    a Car : ('Camaro')
    b : Car('Camaro') # error. redundant initialisation
    b : Car('Camaro').setDate(2014) # ok
    c Car ; c = ('Camaro') # comma is used to separate two statements 
    n : getCar('Camaro')
    o : add(2, 4) 
    p List<Car>(3) # generics
    x : nil ; x = Car('Camaro')


CONSTANT VARIABLE DECLARATION
    let x : 25
    let y Car : ('Camaro')


MUTABLE VARIABLE DECLARATION
- When immutable is set on all variables, default variables become constants by default.
    x : 25 # x is immutable
    x = 52 # error!
    mut y : 52 # y is mutable
    y = 25 # ok



MULTIPLE ASSIGNMENT
    a, b, c : array[2...5] 
    x, y : y, x
    a, b, c, d : 1...5 


NUMERIC FORMATTING
    x : 1_000_000
    y : 1_999.99


ARRAYS # are imlemented as matrices and vectors by default with column-major order
    f [2] Car : [('Camaro'), ('Mustang')]
    g [3] Car ; g [...] = [('Camaro'), ('Mustang'), ('Maserrati')]
    h [] Car ; h [+2] = [('Camaro'), ('Mustang')] 
    i [] Car ; i [+3] ; i [...] = [('Camaro'), ('Mustang'), ('Maserrati')]


ARRAY SLICING
    arr [6] Int : [1, 2, 3, 4, 5, 6]
    print(arr[1...3]) # first index to the third
    print(arr[...5]) # first index to the 5th index
    print(arr[3..._last]) # 3rd index to the last
    print(arr[-3...]) # from the 3rd index but backwards
    newArr [] : arr[...] # all elements
    list(arr[_last...]) # list from behind


MULTIDIMENSIONAL ARRAY
    arr [2, 2] Int : [1, 2 | 3, 4]
    arr [2, 2, 2] Int : [1, 2 | 2, 3 || 4, 5 | 6, 7]  
    arr [2, 2] Int : [1, 2 | 3, 4]
    arr [2, ] Int ; arr [, +2] = [1, 2 | 3, 4]
    list(arr [...])
    list(arr[2, ...]) # list columns in row 2
    list(arr[..., 2]) # list rows in col 2


RAGGED ARRAY # is untidy !! Needs review
    arr [2, ] Int
    arr [0, +2]
    arr [1, +3]
    arr [0, 0, +3] ; arr [0, 1, +3] 
    arr [1, 0, +4] ; arr [1, 1, +5] ; arr [1, 2, +6]


ARRAY OBJECT COMPARISON
    arr1 < arr2 # true if element size of arr1 is lesser than that of arr2
    arr3 [] : arr1 \ 2 # divides all elements by 2


TABLES # specifying dimen in tables are kinda pointless, they can shrink and grow
    candidate [~] Int String : index, name [1, 'Aditya' | 2, 'Nypro'] # table can grow col or row-wise
    list(candidate) # 1, 2, 'Aditya', 'Nypro' # column-wise listing
    list(candidate[]) # 1, 2, 'Aditya', 'Nypro' # column-wise listing
    list(candidate[...])  1, 'Aditya', 2, 'Nypro' # row-wise listing
    list(candidate.index) # 1, 2
    list(canditate[..., 1]) # 1, 2
    list(candidate(2, name)) # 'Nypro'
    cars [2] Int String: [1, 'Camaro' | 2, 'Mustang'] # specify col size using array operator
    list(cars(1)) # 'Aditya'
    cars.add(3, 'Bentley')
    cars[3] = 'Bentley'
    x : car[3]
    cars.remove(2)
    cars [2, 2] # access element on 2nd row, 2nd column


MATRIX-VECTOR OPERATIONS # column major order
    mX [,] : Mat.identity(4, 4)
    mY [,] : [1, 1, 1, 0]
    mZ [,] : mX / mY
    mP [,] : [2, 4, 3 | 3, 1, 5] * [3, 10 | 4, 2 | 1, 7]
    mRows, mCols : m.size()
    list(arr[2, ...]) # list columns in row 2
    list(arr[..., 2]) # list rows in col 2
    list(m) # column-wise listing
    list(m[]) # column-wise listing
    list(m[...]) # row-wise listing
    mQ [,] : {u'} # z is assigned transpose of matrix u 


STRING TYPE
    myStr1 String : ("Hello")
    myStr2 String : ('Hi')
    myStr3 : 'Halo'
    myStr4 : "Bonjour"

STRING FORMATTING
    myStr : 'Hello' * 5
    print('myStr')


STRING INTERPOLATION
    name : 'Pluto'
    time : 2015
    '[name] is a language started in [time]'
    name + ' is a language started in ' + time


STRING OPERATIONS
    'ab' + 'c' # = 'abc'
    'abc' * 2 # = 'abcabc'
    'abcabc' + 'ca' # = 'abbc'
    'abcabc' / 'c' # = ['ab', 'ab']
    ['ab', 'ab'] * 'c' # = 'abcab'


NON-STANDARD STRING LITERAL
    byteArr : /b/"FFE305"
    myRegex : /r/"^(\w+)$"


ESCAPE SEQUENCE
- .[ .t .n ." .' .#
- \[ \t \n \" \' \# \. \\


MULTILINE STRINGS !! Might remove this
    str : 
    ." 
    Hello
    Folks
    ."


VERBATIM STRING
    '''Use \t for tab and \n for newline'''
    """Use \t for tab and \n for newline"""


IF SATEMENT
    if myMoney == 1_000_000:
        print("Yay! I'm rich!")
    ..
    if x == 3 : print('Hello') ..
    if x == 1 :
        print(x)
    elsif x == 2 :
        print(x)
    else :
        print('invalid value')
    ..
    if x : # if x does not equal nil
       print('x has been assigned to')
    ..


FOR LOOP
    for i : 1 | i <= 10 | i++ :
        a += i
        if  i % 2 == 0 :
            print(i)
        else :
            next 
    ..


LOOP
    loop :
        if x != 0 :
            print ('Hi')
        else :
            break
        ..
    ..


WHILE LOOP
    while myBool == true :
        print ('Hello ')
    ..

  
DO WHILE LOOP
    do :
        print ("Hello ")
    while myBool == true


UNTIL LOOP # useful because you know the terminating condition
    until myBool == true :
        print ("Hello ")
    ..


DO UNTIL LOOP
    do : print ("Hello ") | until myBool


LABELS
    [label: outer]
    for i thru 1...10 :
       for j thru range(10) :
           print('i : $i j : $j')
           if j == 5:
               next outer
           ..
       ..
    ..


CONDITION LIST
    if myVar == a | == b | == c :
        print(myVar)
    ..
    if x == y == z :
        play()
    ..


TERNARY OPERATOR
    myVar1 : (myBool == true)? 5 | else 6
    divide(num, denom): (denom == 0)? nan | else num / denom


RANGE
    x, y, z = 1...3


THRU
    list(x thru 2...4)


WHERE 
    arr [] : x * 3 -> x in 1...30 -> x ^ 2 < 3


COMPREHENSION LIST
    arr [] : x * 3 -> x in 1...30 -> x ^ 2 < 3


THRU/STEP
    for x thru 1...6 step 2: 
        print(x)
    ..

IN
    x : 3
    if x in 1...10:
        print(x)
    ..

NOT IN
    a [] : x -> x in 0...20 -> x not in 2...5


NIL CONDITION
    if let x : getValue() : # x is available only in the if branch
        print(x)
    else:
        print('can\'t get value')
    .. 
    if let name : getChars() -> name.characters.count in 4...5:
        print ('hello')
    if x : getString() : print(x) | else : print('x is nil')


ONE-LINE BLOCK
    addTwo(a, b Int) Int:
        print (a + b)
        rt a + b
    ..
    addThree(a, b, c Int) Int: print (a + b + c) ; rt a + b + c 
    if x == y
    if x == y : print(x) 
    if x == y : print(x) | else print(y)
    (x == y): print(x)


USE BLOCK
    add (x, y Int):
        use x, y :
            rt x + y 
        ..
    ..


#NAMED BLOCK
#    block y :
#        m =  a + b
#        n = m + a + b
#    .. 
#    if m < 2:
#        goto y
#    ..


UNNAMED BLOCK
    block:
        m = a + b
        n = m + a + b
    ..


METHOD DEFINITION
    addTwo(a Int, b Int) Int:
        rt a + b
    ..


ARGUMENT NAMING
    addPerson(name : 'Aditya', age : 28)


COMPOUND METHODS
    getValue Int:
        x : 1, y : 2 Int
        () :
            rt x + y
        ..
        (a Int) :
            rt x + y + a
        ..
        (a, b Int) :
            rt x + y + a + b
        ..
    ..


VARIADIC PARAMETERS
    add(first, arr [] Int) Int:
        tmp : first + arr
        for x thru arr:
            tmp += x
        ..
        rt tmp
    ..
    a : add(1, 2, 3, 4, 5, 6)


UNOVERLOADABLE METHODS
    add(args [])
    ::T:: add(args [ ] T) T


PASSING FUNCTION AS ARGUMENT
    addThree(a, b, c, myFunc(Int, Int) Int) Int : 
        rt myFunc(a, b) + c
    ..


RETURNING AN ARRAY
    addThree (a, b, c Int) [3] Int:
        rt [...3] = a + b, a + c, b + c
    ..
    p, q, r: 1, 2, 3
    x, y, z: addThree(p, q, r)
    w: addThree(p, q, r)[1] + z

    addSubTwo(a, b Int) [2] Int:
       rt [1] = a + b
       rt [2] = a - b
    ..


RETURNING A TABLE
    getUser(u User) String Int:
        rt u.name, u.age
    ..
    x [~] : getUser()


RETURNING UNMODIFIABLE VARIABLES
    getList() [~]:
        rt list._readOnly
    ..


METHOD OBJECTS
    add2(~): add1
    add3(~): (Int, Int) Int


CLOSURE
    outer():
        a Int : 6
        rt (b Int) : a + b
    ..
    add Func: outer
    sum Func: outer


ANONYMOUS CLASSES
    keyListener(Event e): e.printText()
    keyListener( 
        Event ():
            printText():
                print ('Hello, World')
            ..
        ..)
     
 
LAMBDAS
    keyListener(Event e): e.printText()
    keyListener(
        Event (): 
            printText(): 
                print ('Hello, ')
            ..
        ..)
    keyListener((): print("World")) # lambda
    keyListener(rt print("World")) # shortened lambda using 'rt'
    myList.fold(0, (a, b): rt  + b)
    myList.fold(0, rt _1 + _2) # shortened lambda


COROUTINES
    y : addThree(3, 5)
    addThree.send(y)
    y = addThree.next()

    addThree(a, b Int) Int:
        q : yield a + b ; take r Int
        yield q + r
    ..


EVENTS
    mathOps(~) Event: (Float, Float) Float
    mathOps += add, subtract, divide
    mathOps -= divide
    buttonPressed Event: createProject
    buttonPressed += addNewEvent 


CLASS DEFINITION
    type Car:
        name, model String
        (name String) :  # Constructor
            self.name = name
        ..
        (self.name, self.model)
    ..


SELF REFERENCE
    type Car:
        name, model String
        (name String) :
            .name = name
        ..
        (.name, .model)
    ..


DESTRUCTORS
    type Car:
        name, model String
        (name String) :  # constructor
            self.name = name
        ..
        (.name, .model)
        (!) : # destructor
            print 'Object Deleted!'
    ..


MODIFIERS
- No public modifer, members are all public by default
    priv a : 10
    pack b : 'HELLO'
    pass a : true # synon with protected
    prod let x : 5f # synon with internal
- proj(ect), prod(uction), prog(ram) clashes with prot(ected)


PACKAGE ACCESS LEVEL
    pack< date Date 
    pack>> isbn Long 


READ-ONLY WRITE-ONLY ACCESS
    rpriv, rpack, rproj
    wpriv, wpack, wproj


MODIFIER BLOCK
    mod priv let :
        x : 45
        y : 2.5f
        z : false
    ..


MODIFIERS IN LIST DECLARATION
    priv let i, j Int


PROPERTIES / GETTERS SETTERS
    myVar1 : set(a, b, c Int): myVar1 = a * b * c | get(): rt myVar1
    myVar1 = (1, 2, 3)
    myVar2 : 
        set(a, b Int): myVar1 = a * b * c
        get(): rt myVar1
    myVar3 : get(): rt myVar1


TYPE CHECKING
    if myCar == Car._exact :
        print('Type is a Car')
    ..
    if myCar == Car._sub :
        print('Type is a sub-class of Car')
    ..
    if myCar == Car._super :
        print('Type is a super-class of Car')
    ..
    :: T[Vehicle._sub] ::
    type Transportation :
        myVehicle1 T
        myVehicle2 T
    ..


IMPORT STATEMENT
    import pluto.io.Console
    from pluto.io.Console import print, println


TYPE ALIAS
    Int as Meter
    import marko.io.SimplifiedRegex as Regex


METHOD CHAINING
- Method chaining is automatic, no need to return self
    type Math:
        value Float

        add(a, b Float) Float:
            value = a + b
        ..
        subtract(a, b Float) Float:
            value = a - b
        ..
    ..
    m Math
    m.add(1, 2).subtract(3, 4)


STICKY TYPES
    sticky type TempConv:
        convToFahr(celsius Float) Float
        convToCelsius(fahr Float) Float
    ..


STICKY TYPES MEMBER
    type Person:
        name String
        age Int
        sticky let specie : 'Homo Sapiens'
        (.name, .age)
        sticky getSpecie() String: rt .specie
    ..

   
STICKY CONSTRUCTOR
    sticky type MyClass:
        x, y Int
        (): # they can't have parameters. They only initialise class fields at first use
            .x = 2
            .y = 3
        ..
        add (x, y Int) Int:
            rt a + b
        ..
    ..


STICKY LOCAL VARIABLES
    add(a Int) Int:
        sticky sum : a
        rt sum += a
    ..


HOLD VARIABLES IN LOOPS
    for x thru 1...50:
        hold x : 1
        print(x * y)
        x++
    ..


INHERITANCE # Not Finalized!
    type Animal:
        move()
    ..
    type Bird [Animal]:
        override move()
        fly()
    ..
    type Horse [Animal]:
        override move()
        gallop()
    ..
    type Pegasus [Bird, Horse] : # inherits Bird and Horse classes
        override move() # certain conflicts must be overriden
    ..

VIRTUAL FUNCTIONS
    type Listener:
        virtual respond()
    ..
    type ButtonListener [Listener] :
        override respond()
    ..


ABSTRACT TYPES
    abs type Player:
        play()
        rewind()
        fastForward()
    ..
    type DigitalPlayer [Player]:
        override play()
        override rewind()
        # override fastForward() # overriding is not compulsory.
    ..


DOWNCASTING ! Needs review
    # assuming Movie and Song extends MediaItem
    for item thru library:
        if item == Song:
            print('Song: [song.name]')
        elsif item == Movie:
            print ('Movie: [movie.name]')
        ..
    ..


CONSTANT CLASS
    let type MyClass:
        x : 'is immutable'
        mut y : 'is mutable'
    ..

UNINHERITABLE CLASS
    solo type MyClass:
        x : 'Class Cannot Be Inherited'
    ..


GENERICS
    ::T [String | Int], U::
    type DataManager:
        T dataID
        U dataX 
        U dataY 
    ..
    object DataManager<String, Car>


ENUMS
    enum RealNum: decimal(/\d|\d+\.\d+/), scientific(/\d\.\d+e[\-\+*]\d/)
    checkNum(rn RealNum): 
        if rn == decimal: print('[rn] is decimal') 
        elsif rn == scientific: print('[rn] is scientific')
    ..


CASES
    a : 'WORLD'
    b : 5
    test Case : (String, Int)
    (test(a, b)): print('Hello [a]') | else print("Bummer!")


REGEX
    x : /\d+/
    x Regex : ("\d+")
    x : /r/"\d+"


PATTERN MATCHING
    type User; type Account; type PayPal [Account]; type Bitcoin [Account]

    test Case: (String, Account) ; ppl Case: (PayPal) ; btc Case: (Bitcoin)
    mary User
    eval mary :
        (test (_.name, ppl (_.account))): print ('[_.name]: [_.account]') # covariance in case matching
        (test (_.name, btc (_.account))): print ('[_.name]: [_.account]') # _ represent the value passed into eval block
    ..


EVAL
    test Case : (String, Account)
    eval mary :
        (test(_.name, _.account)): print ('[_.name]: [_.account]')
        (User): print (_.toStr( )) # val is an alias to the evaluated
        else : print ('Unkown') # default
    ..


EXPLICIT TYPE CASTING
    x Int : 5
    y Byte : 6
    let z : y + Int(x)


STACK EXPRESSION
    a : add (x, y) >>> subtract(_arg, z) # tmp represent the value passed from preceding method
    a : subtract(_arg, z) <<< add (x, y) # same as above


MOVE SEMANTICS
- Move feature is automated in Pluto in any place where it is possible. But you can still explicitly specify it.
    x : move(getPerson('Akinyemi'))
    y : getPerson('Californio')._move


CONCURRENCY
- All singular (_var+) and associative (_var+=) operations on variables are atomic by default. 
- In an assignment or initialisation operation. The whole expression is singularly atomic
- Variables are volatile by default 
- And methods are sychronised by default


ATOMIC EXPRESSION
    x : y .= 5 # get then set
    x : y = 5 # set then get
    lock (y == 5)? print('y is 5')


ATOMIC BLOCKS
    lock block:
        x : y
        y = 5
    ..


OPERATOR OVERLOADING
    _var++ ():
        value++
    ..
    _++var ():
        ++value
    ..
    _-var ():
        0 - value
    ..
    _var* (other MyObj) MyObj:
        rt MyObj(.value * other.value)
    ..
    _var() (other Int):
        value = other
    ..
    _type() (other Int) MyObj:
        rt MyObj(other)
    ..
    _var[] (row Int, col Int) MyObj:
        rt my2DArr[row, col]
    ..
    _var=[] (args [] Int) MyObj:
        for x thru args:
            hold i : 1
            my1DArr[i] = x
        ..
    ..


TRY & ASSOCIATES
    main():
        ensure:
            file.close()
        ..
        print("I'm about to open a text file and print its first 500 characters")
        file File : ("C:/Users/Hello/hello.txt")

        try file.open().print(1...500)
        catch(fnfe FileNotFoundErr, ioobe IndexOutOfBoundErr):
            if(fnfe): printErr('Can\'t find file!')
            if(ioobe): printErr('Can\'t find file!')
        ..
    ..
    try:
        file.open()
        file.write('Hello')
    catch(fnfe FileNotFoundErr):
        printErr('Can\'t find file!')
    ..
    try:
        file.open()
        file.write('Hello')
    catch(fnfe FileNotFoundErr):
        printErr('Can\'t find file!')
    ensure:
        file.close()
    ..
    try let x : getObject()
    except x == nil :
        print('x is nil')
    ..
    try:
        let x : getObject()
    except x == nil:
    catch(ne NilErr):
        printErr('x can\'t be nil!')
    ..
    try:
        let x : getObject()
    except x == nil: 
        throw NilErr
    catch(ne NilErr):
        printErr('x can\'t be nil!')
    ..
    try:
        file.open()
        let x : file.readLine()
    except x == nil: 
        throw NilErr
    catch(ne NilErr):
        printErr('x can\'t be nil!')
    catch(fnfe FileNotFoundErr):
        printErr('Can\'t find file!')
    ensure:
        file.close() 
    ..
    try e: person.getData().getAge() | except nil: print('Nil Error')


ASSERTION
    assert x == null
    assert x == null : print("Hello")


ITERATORS (?)


FLOATING POINT BITWISE OPERATORS (?)


HINTS
    @deprecated: [msg: "MediaPlayer class should be used instead"]
    @stub
    @if:[platform: "Mac"] print("This is a Machintosh Computer") | @endif
    #------------------------------------
    @compiler: [] # evaluated at compile-time
    @linker: [] # evaluated at link-time
    @runtime: [] # evaluated at runtime
    @if: [] # evaluated at compile, link and run time


COMPILER HINT
    @compiler: [
        typing: "static"
    ]


NON-STANDARD STRING LITERAL HINT
    myByteArr []: /b/"FFE305"
    myRegex: /r/"^(\w+)$"
    @compiler: [ 
        stringLiteral: [
            r: "Regex(_str)", 
            b: "tokenize(_str, /[\dA-Fa-f][\dA-Fa-f]/).toByteArray()" 
        ]
    ]


META VARIABLES
    a : b._type  # pass type
    c : b._ref   # to explicitly pass by ref (equal)
    d : e._strongRef  # to explicitly make a strong ref, any other refs to the object will be weak
    e : f._value   # to explicitly pass by value
    x : y._move  # move ownership, works only if the lhs is the owner of the object
    d : c    # default, determined by lang
    i : int._min


CONTEXT SPECIFIC META VARIABLES
    arr[_last] = 20
    if(x == _even)
    if(y == _odd)
    if(a == _max)


REFLECTION
    # dynmically determining which class to use
    @if:[ stage: "runtime", condition: ["Main.useOldClass == true"] ]
        type Class:
            value String: set(x String): value = x | get(): rt value 
            (.value)
        ..
    @else
        type Class:
            str String: set(x String): value = x | get(): rt value
            num Float64: set(x Float64): value = x | get(): rt value
            (.str)
            (.num)
        ..
    @endif


HOMOICONIC !! Needs Review
    a : parse("1 + 2 * 3")
    c SynTree : (:call, +, 1, (:call, *, 2, 3))
    d Exp: (
        type Hello:
            show(): print("Hello!")
        ..)
    d[Hello()].show()


COMPLEX, QUATERNION DECLARATION 
    x : 5 + 2i # complex
    y : 5 + 2i + 3j + 4k # quaternion 
 

MATHEMATICAL EXPRESSION
    f : 4f # f is a literal specifier here for f32
    g : {2/(4f^2) - 1 + (x-1) + 1} # f is a coefficient here
    h : {3f * 2g/5}f32 # the first f is a coefficient, the second f specifies that expression uses f32 operations. It is by default f
    i : {3x + y(4f^2) - 2/d} # y is a coefficient here, not a function call
    j : {3x + [y(4f^2)] - 2/d} # y is a function call here


SYMBOLIC CLASSES
    a Exp : (4 * 5)
    b Symbol : (:Hello, Hi, Halo, Bonjour)
    x : a.eval() # 20
    y : b.toString() # 'HelloHiHaloBonjour'


NUMERIC CLASS
    x : UInt.max()
    y : Int32.min()
    z : {2x + 4y/3}.round() + (24.25/4).floor()


RATIONAL NUMBERS !! Needs review 
    x : 2//3 
    x.toFloat() # rational format can be changed to fp
    r : (2.3).toRatio() # but fp can't be changed to rational format (??)
    y : 4//6 ; print(y) # 2//3
    4//2 == 1//2 # true
    4//2 == 0.5 # true
    

INTEGER BITWISE OPERATORS
    myVar : 2.&2 # and
    myVar1 : 2.|2 # or
    myVar3 : ~2 # exclusive or


SHIFT OPERATORS
    myVar : 4<<1
    myVar : 2>>2


BINARY LITERALS
    myVar : 0b11001001


HEXADECIMAL LITERALS
    myVar : 0x5eff77


OCTAL LITERALS
    myVar : 0o56773


UTF-8 CHARACTERS
    char : '\u6E'


ITERABLES
- Coroutines
- Range
- Array objects
- Table objects
- Iterable SubClasses
- String


CLASSES OF OBJECTS
    Any
    Func
    Var
    Arr
    Tab
    Exp


PREDEFINED TYPES # These types are optimized as part of the lang
    Int, Int16, Int32, Int64
    UInt, UInt16, UInt32, UInt64
    Float, Double
    Bool
    String, Str (0.8.1)
    Char
    Byte
    SByte
    Comp, Comp128
    Quat, Quat256
    Num # (combines the features of BigInt, BigFloat)
    Ratio


NUMERIC LITERALS
    123
    123ui
    123b
    123sb
    123f
    123.0
    123.4
    123.4f
    123.4
    1.234e-2
    1.234e-2f


LOGICAL vs BITWISE OPERATORS 
    ! & | 
    ~ .& .|


BUILT-IN TYPES and PARENTS
    Obj (0.4)
    Nil (0.4) 
    String  (0.6.1)
    Int (0.4)
    Float (0.4)
    Num (0.4)
    Double  (0.6.1)
    Bool (0.4)


KEYWORDS
    stick (0.4) sticky  (0.6.1) 
    # pub (0.4) public (0.6.1) pub
    priv (0.4) private (0.6.1) priv
    pro (0.4) protected (0.6.1) prot
    pack (0.4) package (0.6.1) pack
    pass (0.7.5)
    class (0.4) 
    rt (0.7.2)
    # def (Rev 0.5.2)
    let (Rev 0.5.2)
    get (Rev 0.5.2)
    set (Rev 0.5.2)
    as (0.8)
    if
    else
    elsif
    while  (0.6.1)
    eval (Rev 0.5.2)
    for
    do
    until (0.6.1)
    next (0.6.1)
    break
    label (0.7.0)
    # fixed
    thru (0.8)
    in(0.7.2)
    skip(0.8)
    ensure (0.8)
    try
    catch 
    except
    self
    mut (0.8)
    nan (0.8)
    nil
    tmp (0.8)
 

OPERATORS
    +
    -
    *
    /
    // # for ratios
    ^
    %
    --
    ++
    =
    +=
    -=
    *=
    /=
    //=
    ^=
    %=
    ==
    !=
    !
    >
    <
    >=
    <=
    &
    |
    ~
    .|
    .&
    >>
    <<
-   '
    .=


SYNTACTIC SYMBOLS
    |
    *
    ~
    @
    .
    :



DUCK TYPING
    c : nil
    a : 25
    b : [1, 2, 3, 4, 5] # array
    c = [1, 2, 3 | 4, 5, 6] # multi dimen array
    d : ['Hello', 25, 1.3f, 'Hi'] # table
    getArea(length, breadth):
       rt length * breadth
    ..
    length : 10
    breadth : 25
    rectangleArea : getArea(length, breadth)
