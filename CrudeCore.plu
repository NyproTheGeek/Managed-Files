# 19/06/16
# 30/07/16 # revised to Pluto 0.8.1
# names are compulsory for some
# ids are provided by default by the appends# however,
# the user can override the id, tho it must not clash
# with the ids of other objects in the category.

# 06/08/16
# virtually everythng has an ID, so if there is no name, id is saved instead

type Group:
	name := String
	id := Int
	models := List<ref Model>
..

type Model:
	name := String
	id := Int
	skels := List<own Skeleton> # destroyed when model is disposed
	ref currentSkel := Skeleton
	group := Group
..

type Skeleton:
	name := String
	id := Int
	bones := List<own Bone>  # sorted by name ? # destroyed when bone is disposed
	skins := List<own Skin> # destroyed when skeleton is disposed
	ref currentSkin := Skin
	ref meshFrame := MeshFrame
	anims := List<ref Animation>
	ref model := Model
..
play(skel := Skeleton, anim := Animation, speed := 1f)

type Bone:
	name := String
	orderIndex := Int # also id
	children := List<ref Bone>
	ref baseParent := Bone
	ref tipParent := Bone
	ref skel := Skeleton
	spriteSlot := SpriteSlot
	pos := 2 Float []
	angle := Float
	length := Float
	ikWeight := Float
	propsFlag := Bitset<16>
..

type SpriteSlot:
	ref skin := Skin
	sprites := List<ref Sprite>
	visibleSprites := HashMap<Int, Int> # sprite index and alpha
	# if a visible sprite has an alpha of 0, it is not rendered at all
	pos := 2 Float []
	angle := Float
	scale := 2 Float []
	shear := 2 Float []
	tint := 4 Float []
	alpha := Float
..


type Sprite:
	name := String
	id := Int
	ref mesh := Mesh
	pos := 2 Float []
	angle := Float
	scale := 2 Float []
	shear := 2 Float []
	rgba := 4 Float []
	image := ImageData
..

type ImageData:
	id := Int # must correspond to associated image
	ref texAtlas := TextureAtlas
	texPos := 2 Float []
	texDimen := 2 Float []
	texAngle := Float
..

type TextureAtlas:
	name := String
	id := Int
	bitmap := [,] Vec4f
..

type Mesh:
	name := String # it can be empty
	id := Int
	vertexData := List<4 Float []> # positions and uvs
	indices := List<2 Int []>
	meshSeamVertexData := List<4 Float []>
	absMesh := AbstractMesh
..

type AbstractMesh:
	vertexData := 8 Float []
..

type MeshFrame: # just for grouping meshes # just like group groups models
	name := String
	id := Int
	mesh := List<ref Mesh>
..

type Skin:
	name := String
	id := Int
	sprites := List<Sprite*>
..

########################################################################################

type Animation: # can be used for transform constraint
	name := String
	id := Int
	keys := List<own Key> # destroyed when animation is disposed
	keyFields := List<own KeyField> # top-level keyFields # destroyed when animation is disposed
	curves := List<own CurveGraph> # destroyed when animation is disposed
	bridgeSheets := List<own BridgeSheet> # bridgesheets that precede the animation # destroyed when animation is disposed
	subAnimations := List<own SubAnimation> # destroyed when animation is disposed
	frames := HashMap<Int, List<ref KeyField>> # frame number and list of top-level keyFields
	# KeyField loopTimes appends the KeyField to the Timeline by exactly the loopTimes
..

type SubAnimation: # SubAnimation is a subset of an animation, it is needed for reuse
	name := String
	id := Int
	ref parentAnim := Animation
	range := 2 Int [] # begin and end frame
..

type BridgeSheet:
	name := String
	id := Int
	curves := HashMap<ref Key, own CurveGraph> # begin key and preceding curve # destroyed when bridgeSheet is disposed
..

type CurveGraph:
	id := Int
	isStepped := Bool
	p1 := 2 Float []
	p2 := 2 Float []
	# if respectively, p1 and p2 are 0,0|1,1 or 0,0|0,0 or 1,1|1,1 or 1,1|0,0 then they are linear
	# if isStepped is true, then p1.x is used as the step value; it must be in the range 0 and 1
..

# KEYFIELDS

type KeyField:
	id := Int
	boneIndex := Int
	progressiveLoop := Bool
	loopTimes := Float
	loopCount := Float
	isSubKeyField := Bool
	subKeyFieldRefer := Int # subKeyField frame go-to
	# any two subKeyFields at the same frame position cannot have the same frame go-tos
..

type RotateKeyField [KeyField]:
	spriteIndex := Int # negative if on slot, i.e. not specific to sprite
	subKeyFields := HashMap<own RotateKeyField, Int> # rotateKeyField and frame number
	keys := HashMap<ref RotateKey, Int> # rotateKey and frame number
..

type TranslateKeyField [KeyField]:
	spriteIndex := Int # negative if on slot, i.e. not specific to sprite
	subKeyFields := HashMap<own TranslateKeyField, Int>
	keys := HashMap<ref TranslateKey, Int>
..

type ScaleKeyField [KeyField] :
	spriteIndex := Int # negative if on slot, i.e. not specific to sprite
	subKeyFields := HashMap<own ScaleKeyField, Int>
	keys := HashMap<ref ScaleKey, Int>
..

type TranslateVertexKeyField [KeyField]:
	spriteIndex := Int # negative if on slot, i.e. not specific to sprite
	vertexIndex := Int
	subKeyFields := HashMap<own TranslateMeshKeyField, Int>
	keys := HashMap<ref TranslateVertexKey, Int>
..

type DrawOrderKeyField [KeyField]:
	subKeyFields := HashMap<own DrawOrderKeyField, Int>
	keys := HashMap<ref DrawOrderKey, Int>
..

type TintKeyField [KeyField]:
	spriteIndex := Int # negative if on slot, i.e. not specific to sprite
	subKeyFields := HashMap<own TintKeyField, Int>
	keys := HashMap<ref TintKey, Int>
..

type SwapKeyField [KeyField]:
	subKeyFields := HashMap<own SwapKeyField, Int>
	keys := HashMap<ref SwapKey, Int>
..

# KEYS

type Key

type RotateKey [Key]:
	rotateValue := Float
	curve := CurveGraph
..

type TranslateKey [Key]:
	translateValue := 2 Float []
	curveX := CurveGraph
	curveY := CurveGraph
..

type ScaleKey [Key]:
	scaleValue := 2 Float []
	curveX := CurveGraph
	curveY := CurveGraph
..

type TranslateVertexKey [Key]:
	translateValue := 2 Float []
	curveX := CurveGraph
	curveY := CurveGraph
..

type DrawOrderKey [Key]:
	bonePosChanges := List<2 Int []> # old pos and new pos
..

type TintKey [Key]:
	tint := 4 Float [] # rgba
	curve := CurveGraph
..

type SwapKey [Key]:
	visibleSprites := HashMap<Int, Int> # indexInSlot and alpha
	curve := CurveGraph
..


# EDITOR
type Label:
..
