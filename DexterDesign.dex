--------------------------------------------------
------------------COMPILE TIME--------------------
--------------------------------------------------

-----------------COMPILER GIST--------------------
- stores known primitives, strings and buffers
- Optimizations
	- moving temporaries reference to assigned.
	- reusing object containers
		- in an rhs expression, sub-expressions overwrite each other as they go, if they
		- have the same container type, and finally the ending expression overwrites the
		- assigned object’s container if they have the same container type.
- Notice
	- When a function is called with lesser number of parameters.
- Warnings
	- When an subject is declared but not accessed.
	- When you call a function with arguments that can (potentially) cause an ambiguous call.
- Errors
	- When an object accesses a field name or function name its type did not provide.
	- When a function without a bang signature writes to a referenced argument.
	- When you call a bang function without annotating it with a bang.
	- When you access a (potentially) uninitialized subject.
	- When you don't initialize all the fields within initializer.
	- When you write to a constant subject that has already been given a first value.
- Guarantees
	- If you throw an exception in a destructor, the object will be destroyed.
	- If you throw an exception in a constructor, the object will not be created
	- Local automatic objects will be destroyed when the function returns.
- Guideline Notice
	- When a type name starts with a lowercase letter or underscore
	- When a subject or function name starts with an uppercase letter.
	- When nameless parameters are used inappropriately (i.e. not in first params or enum element params)
	- When there is adjacent repetition of subject names in a condition.

-------------------TOOLCHAIN------------------------
- WEB TARGET
	- compiler.wasm
	- starter.js
	- web_lib.dex

- LLVM TARGET
	- compiler.exe
	- lib.dex

------------------------- ASTS ---------------------
# redesigned 16/01/17
type definition:
	(abstract, access, name, base_types[], body)
global_type_extension definition:
	(access, name, base_types[], body)
local_type_extension definition:
	(name, base_types[], body)
# FUNCTIONS
function definition:
	(access, name, bang, params[:]<call_name:expr>, body)
catch_function definition:
	(access, name, param_type, body)
destructor definition:
	(name, destructor_type, body)
closure definition:
	(name, bang, params[:]<call_name:expr>, body)
catch_closure definition:
	(name, param_type, body)
destructor_closure definition:
	(name, destructor_type, body)
# SUBJECTS
global_subject definition: # global subjects
	(let, access, name, assign_type, rhs)
type_subject definition: # fields
	(let, pin, access, name, assign_type, rhs)
function_subject definition: # local subjects
	(let, pin, name, assign_type, rhs)
loop_subject definition:
	(let, hold, pin, name, assign_type, rhs)
# PROPERTIES
global_property definition:
	(let, access, name, assign_type, set_body, get_body)
type_property definition:
	(let, pin, access, name, assign_type, set_body, get_body)
function_property definition:
	(let, pin, name, assign_type, set_body, get_body)
loop_property definition:
	(let, hold, pin, name, assign_type, set_body, get_body)
set_body definition:
	(body)
get_body definition:
	(body)
# STATEMENTS
import statement:
	(path, names[], specifiers[])
if statement:
	(exprs[], body, end)
elif statement:
	(exprs[], body, end)
else statement:
	(body)
where statement:
	(exprs[])
match statement:
	(args[]<expr>, body)
# w:th statement:
# 	(exprs[], body, end)
# c:se statement:
# 	(exprs[], body, end)
with statement:
	(exprs[], body, end)
case statement:
	(exprs[], body, end)
for_loop statement:
	(loop_iterators[], body)
while_loop statement:
	(exprs[], body)
repeat_loop statement:
	(body, exprs[])
block statement:
	(body)
try statement:
	(body)
try_with statment:
	(expr, body)
catch statement:
	(params[:]<name:expr>, body)
ensure statement:
	(body)
# EXPRESSIONS
label expression:
	(name)
loop_iterator expression: # x in y
	(ref, lhs, rhs)
# dot_call expression: # x.y # for fields and bracketless no-arg functions only
# 	(ref, name0, name1)
# arrow_call expression: # ->y # for fields and bracketless no-arg functions only
# 	(ref, name0, name1)
# list_index expression: # x[y]
# 	(ref, expr, indices[])
function_call expression: # x(a, b, c)
	(ref, emit, name, bang, generic_type_args[], args[:]<name:expr>) # vector??
# chain_call expression: # >>(a, b, c)
# 	(ref, args[:]<name:expr>)
catch_call expression: # x`y
	(expr, name)
new_call expression:
	(ref, super_or_self_call_expr, args[:]<name:expr>)
super_call expression:
	(generic_type_args[], args[:]<name:expr>)
self_call expression:
	(ref, generic_type_args[], args[:]<name:expr>)
as expression:
	(ref, lhs, rhs)
equal expression:
	(ref, lhs, rhs)
not_equal expression:
	(ref, lhs, rhs)
greater_than expression:
	(ref, lhs, rhs)
greater_than_or_equal expression:
	(ref, lhs, rhs)
lesser_than expression:
	(ref, lhs, rhs)
lesser_than_or_equal expression:
	(ref, lhs, rhs)
not expression:
	(ref, expr)
return expression:
	(ref, expr)
yield expression:
	(ref, expr)
break expression:
	(labelName)
continue expression:
	(labelName)
spill expression:
	()
nothing expression:
	()
reference expression:
	(ref)
name expression:
	(ref, name)
func_object expression:
	(ref, name, args[]<expr>)
type_object expression: # |Int|
	(name)
unnamed_arg expression: # :$1 + $2
	(ref, number)
varargs expression: # ...args # only in function parameters
	(let, pin, name, assign_type, rhs)
unary prefix expression:
	(ref, op, expr)
unary postfix expression:
	(ref, expr, op)
binary expression:
	(ref, lhs, op, rhs)
generics_decl expression: # $T(y)
	(ref, name, contraint_kind, expr)
generics_type_of expression: # $(y)
	(ref, expr)
generics_just_like expression: # $T of y
	(ref, name0, name1)
range expression: # {x:y}
	(ref, lhs, rhs)
indexer expression: # xx[:]
	(ref, expr, indices[])
tupling expression: # ...xx
	(ref, expr)
transpose expression: # [1, 2, 3]@
	(ref, expr)
assignment expression:
	(ref, lhs, rhs)
integer_int literal:
	(ref, literal)
integer_uint literal:
	(ref, literal)
integer_i8 literal:
	(ref, literal)
integer_u8 literal:
	(ref, literal)
integer_i16 literal:
	(ref, literal)
integer_u16 literal:
	(ref, literal)
integer_i32 literal:
	(ref, literal)
integer_u32 literal:
	(ref, literal)
integer_i64 literal:
	(ref, literal)
integer_u64 literal:
	(ref, literal)
float_f32 literal:
	(ref, literal)
float_f64 literal:
	(ref, literal)
bool literal:
	(ref, literal)
string literal: # "Hello [name]!"
	(ref, strings[], exprs[])
chars literal: # ch."Hello [name]!"
	(ref, chars[], exprs[])
tuple literal: # (n:p, y:z)
	(ref, args[:]<name:expr>)
list literal: # |2*3 Int|[,]
	(ref, dimen[], type, exprs[])
dict literal: # |Str:Int|[:]
	(ref, dimen[], types[], exprs[:]<key:value>)
regex literal:
	(ref, literal)
ns_number literal:
	(ref, name, literal)
ns_string literal:
	(ref, name, literal)
ns_list literal: # |2*3 Int| list.[,]
	(ref, dimen[], type, name, exprs[])
ns_dict literal: # |Str:Int| list.[:]
	(ref, dimen[], types[], name, exprs[:]<key:value>)
formatting expression: # price.%2f
	(ref, expr, literal)
------------------- FLOW GRAPH ---------------------
scope:
	(number, parent, children)
type:
    (name, template, generics_signature)

function:
    (name, args_signature, generics_signature)

type_head:
    (overload_size)

function_head:
    (overload_size)


--------------------------------------------------
------------------RUNTIME-------------------------
--------------------------------------------------


----------------- BYTECODE -----------------------
# MOV
mov_v a b ## b = val a [primitive]
mov_r a b ## b = ref a [primitive]
# ADD, SUB, MUL, DIV, MOD, EXP, ROOT, UNM
add a b c ## c = a + b [primitive]
sub a b c ## c = a - b [primitive]
mul a b c ## c = a * b [primitive]
div a b c ## c = a / b [primitive]
mod a b c ## c = a % b [primitive]
exp a b c ## c = a ^ b [primitive]
sqrt a b ## b = √ a [primitive]
unm a b ## b = -a [primitive]
# INCR, DECR, STEP
incr a b ## b = ++a [primitive]
decr a b ## b = --a [primitive]
# CAST
cast a b ; type_index ## b = T(a) [primitive]
# EQ, LT, LE
eq a b c ## c = a == b [primitive]
lt a b c ## c = a > b [primitive]
le a b c ## c = a >= b [primitive]
if a ; jump_offset ## a ? _ : _ [primitive]
# AND OR
and a b c ## c = a & b [primitive]
or a b c ## c = a | b [primitive]
# BNOT, BAND, BOR, BXOR,
bnot a b c ## c = a .not b [primitive]
band a b c ## c = a .and b [primitive]
bor a b c ## c = a .or b [primitive]
bxor a b ## c = a .xor b [primitive]
# SHL, SHR
shl a b c ## c = a .shl b [primitive]
shr a b c ## c = a .shr b [primitive]
# FORLOOP
forloop_ a; begin; step; end; instruction_index ## for a in [begin:step:end] [primitive]
forloop2_ a b; begin; step; end; instruction_index ## for a in b[begin:step:end] [complex]
# MK
mkbuf a ; dimen ; dimensizes # NEEDS REVISION !!!!!!!
mkcmp a ; type_index; constructor_function_index # NEEDS REVISION !!!!!!!
# PULLGLOBAL
pullglob_ a ; global_index # sets pointer to a particular object in # NEEDS REVISION !!!!!!! global.
pushbuf_v_ a b ; index # NEEDS REVISION !!!!!!!
pushbuf_r_ a b ; index # NEEDS REVISION !!!!!!!
pushbuf_wr_ a b ; index # NEEDS REVISION !!!!!!!
pushbuf_vnull_ a b ; index # NEEDS REVISION !!!!!!!
pushbuf_rnull_ a b ; index # NEEDS REVISION !!!!!!!
pushbuf_wrnull_ a b ; index # NEEDS REVISION !!!!!!!
pushcmp_v_ a b ; index # NEEDS REVISION !!!!!!!
pushcmp_r_ a b ; index # NEEDS REVISION !!!!!!!
pushcmp_wr_ a b ; index # NEEDS REVISION !!!!!!!
pushcmp_vnull_ a b ; index # NEEDS REVISION !!!!!!!
pushcmp_rnull_ a b ; index # NEEDS REVISION !!!!!!!
pushcmp_wrnull_ a b ; index # NEEDS REVISION !!!!!!!
--------
# last index is checked to determine if pulling/pushing barePrimitive
pullbufel_ a b # NEEDS REVISION !!!!!!!
pushbufel_ a b # NEEDS REVISION !!!!!!!
---------
pullcmpel_ a b ; index # pullcmp pulls the ref onto the stack # NEEDS REVISION !!!!!!!
---------
pushcmpel_v_ a b ; index # NEEDS REVISION !!!!!!!
pushcmpel_r_ a b ;  # NEEDS REVISION !!!!!!!
pushcmpel_wr_ a b ; index # NEEDS REVISION !!!!!!!
pushcmpel_vnull_ a b ; index # NEEDS REVISION !!!!!!!
pushcmpel_rnull_ a b ; index # NEEDS REVISION !!!!!!!
pushcmpel_wrnull_ a b ; index # NEEDS REVISION !!!!!!!
# INDEX
index ; number # NEEDS REVISION !!!!!!!
index_ ; number # NEEDS REVISION !!!!!!!
# TYPECHECK
typecheck_ a ; type_index ; switch_number ; # NEEDS REVISION !!!!!!!
typecheck a b # NEEDS REVISION !!!!!!!
typechecksub a b # NEEDS REVISION !!!!!!!
typecheck2 a ; type_index # NEEDS REVISION !!!!!!!
typechecksub2 a ; type_index # NEEDS REVISION !!!!!!!
# SWITCH
switch ; instr_index ; instr_index ; # NEEDS REVISION !!!!!!!
# CALL, RUN, EMIT
call a # NEEDS REVISION !!!!!!!
run a # NEEDS REVISION !!!!!!!
emit a # NEEDS REVISION !!!!!!!
call2 ; function_index # NEEDS REVISION !!!!!!!
run2 ; function_index # NEEDS REVISION !!!!!!!
emit2 ; function_index # NEEDS REVISION !!!!!!!
# STEPBACK
stepback ; offset # NEEDS REVISION !!!!!!!
# LEN  # Cannot be Nil # Complex
lencmp a b # NEEDS REVISION !!!!!!!
lenbuf a b # NEEDS REVISION !!!!!!!
# DIMEN # Cannot be Nil # Buffer
dimen a b # NEEDS REVISION !!!!!!!
dimensize a b c # c is the dimension position # NEEDS REVISION !!!!!!!
# CATCH, THROW
catch a b  # automatic clearance for just one object # NEEDS REVISION !!!!!!!
throw a # NEEDS REVISION !!!!!!!
# JMP, JMPBACK
jmp ; jump_offset # NEEDS REVISION !!!!!!!
jmpback ; jump_offset # NEEDS REVISION !!!!!!!
# RET
ret a # NEEDS REVISION !!!!!!!
ret2 # NEEDS REVISION !!!!!!!
# CLEAR
clear ; number # NEEDS REVISION !!!!!!!
# PRINT, SCAN
print a # NEEDS REVISION !!!!!!!
println a # NEEDS REVISION !!!!!!!
scan a # NEEDS REVISION !!!!!!!
# FOPEN, FREAD, FWRITE, FCLOSE
fopen a # NEEDS REVISION !!!!!!!
fread a b # NEEDS REVISION !!!!!!!
fwrite a b # NEEDS REVISION !!!!!!!
fclose a # NEEDS REVISION !!!!!!!
# EXIT
exit a # error code # NEEDS REVISION !!!!!!!

---------------- RUNTIME LISTS ---------------------
globallist # globals, constants/loaded values, mockobject
##
funclist
##
typelist
##
instructionlist
attributelist
# switchlist
##
stack
stackheadlist
thrownlist
returnedlist

--------------------- COMPLEX ----------------------
complex:
	type
	refcount
	len
	body ptr

body ptr:
	type
	refcount
	size
	fields

---------------------- BUFFER ----------------------
buffer:
	type
	refcount
	dimens
	bufferopt

bufferopt:
	primitive array (I8, U8, I16, U16, I32, U32, I64, U64, F32, F64, Bool)
	body ptr array
	inbuffer array

inbuffer:
	type
	len
	bufferopt

----------------THINGS THAT LIVE STACK -------------
stack primitive
struct-buf
struct-cmp
el-cmpbuf
el-cmpcmp
el-cmpprim
el-bufbuf
el-bufcmp
el-bufprim

-------------- STACK OBJECTS MANAGEMENT ------------
STACK HIERARCHY
foo ← [P1] current_stack_size();
try ← [P2] current_stack_size() | catch_instruction_pos();
bar ← [P3] current_stack_size();
----------------
THROWN OBJECTS
a # Nil Exception
b # Cast Exception
c
 # others
----------------
RETURNED OBJECTS
a
----------------

------------------ EXAMPLES ----------------------
[SOURCE CODE]
var score = TestScore
var buffer = [15, 6, 8, 0, 21, 75, 3, 7]
score = buffer[5:]
[BYTECODE]
mkcmp score ; TestScore ; TestScore()
ret2
mkbuf buffer; 1 ; 10
pushbuf buffer t1
call ; __setbuffer(=:Testcore, =:Buffer, =:Int, =:Int, =:Int)
ret2


[SOURCE CODE]
type Person(name, age):
	var name = Str
	var age = Int
..
func getDetails person =: Person:
	self.name, self.age
..
type Employee(super(name, age), job, company) <: Person:
	var job, company = Str
..
type DivByZeroEx(super msg) <: Exception
func main:
	var someone =: Employee(
		"David Copenhagen",
		45,
		"Managing Director",
		"Pharmadise, Inc."
	)
	let name, age = dave.getDetails
	let david = Employee(name, age)
	let a = 5f
	let b = 2f
	let c = a.div(b)`divErr
	catch divErr err =: DivByZeroEx: println 'Attempt to divide by zero!'
..
func div num & den =: Int:
	if den == 0: throw DivByZeroEx
	num / den
..
[BYTECODE]

------------- TYPE INFERENCE ---------------------
- get all types and id them
- get all blocks and nested blocks and id them
- assignment is the point of type transfer
- flow branches
- where does the flow begin?
- function has types as signatures and a return type

------------- OBJECTS THAT NEED WORK -------------
- properties
- events
- indexer
- generators
- tuples
- optional types (Nil)
- scope and objects on stack

------------ FUTURE IMPLEMENTATIONS ---------------
- Making fibers and threads work together to form coroutines
- Detecting Cyclic Ref Using a Relationship Cyclic Tree
	- Object -> [parents] [children] [siblings] [level] (all ordered aphanumerically)
	- When an object points to its siblings or its parent siblings, then it is rouge object likely to cause a cyclic ref.
	- Traverse the structure starting from the rouge object using a depth-first approach. Test all possible branches (infinite lookahead) and see if any of the encountered node is a parent of the rouge object. Once the trasversal goes below the rouge objects level, it is stopped and the next branch is tested.
- Improving Automatic Reference Counting
	- Counting refs at compile-time and determining objects destruction points while considering concurrency.
- Detecting a cyclic ref at compile-time and determining destruction points
- Tail call optimization
- More Unicode support
- Constant folding


------------- OPCODE STRUCTURE ----------------
8
8, 8
8, 8, 8
8, 8, 8, 8
32/64

------------- ASTRO BYTECODE FILE -------------
>HEADER
	signature = 'ASTB' # 4Bytes
	encoding = 1 # 1Byte # UTF-8
	version = [
		major : 0 # 1Byte
		minor : 1 # 1Byte
		patch : 0 # 1Byte
	]
	contentSize = 150 # 4Byte

>TYPES
	bytes = 150 # 4Byte
	types = [
		type1 : []
		type2 : []
	]

>FUNCTIONS
	bytes = 150
	funcs = [
		func1 : []
		func2 : []
	]

>GLOBALS
	bytes = 150
	globals = [
		constants : [
			bytes : 30

		]
		globals : [
			bytes : 30

		]
		typevars : [
			bytes : 30

		]
		funcvars : [
			bytes : 30

		]
	]

>INSTRUCTIONS
	bytes = 150
	instructions = []

>ATTRIBUTES
	bytes = 150
	attributes = []



#########################OBJECTS SERIALISED###########################
primitive = [
	bytes = 12
	type = t'I64'
	value = 56
]

complex = [
	bytes = 36
	type = t'Person'
	size = 2
	string = []
	primitive = []
]

buffer = [
	bytes = 50
	type = t'Buffer/Str'
	dimen = 1
	dimenSizes = [3]
	array = [
		string : [],
		string : [],
		string : []
	]
]

func = [
	bytes = 20
	type = t'Func'
	instrIndex = 32
	overloadHead = 12
	layout = [
		bytes : 34
		obj1 : [ kind = k'global', globalIndex = 55]
		obj2 : [ kind = k'local', globalIndex = 0]
		obj3 : [ kind = k'constant', globalIndex = 57]
		obj4 : [ kind = k'funcvar', globalIndex = 58]
	]
]

type = [
	bytes = 6
	type = t'DataType'
	ancestorSize = 2
	ancestors = [34, 64] # ancestors is sorted.
	constructorsSize = 2
	constructors = [23, 7]
	normalDestructor = 56
	exceptionDestructor = 71
	mockobject = [
		bytes : 34
		type : t'Person'
		size : 4
		refCount : 0
		string : []
		primitive : []
	]
]
